{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#itfit","title":"itfit","text":"<p>Work in progress...</p> <p></p>"},{"location":"LICENSE/","title":"LICENSE","text":"<p>Apache License Version 2.0, January 2004 http://www.apache.org/licenses/</p> <p>TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION</p> <ol> <li>Definitions.</li> </ol> <p>\"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.</p> <p>\"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.</p> <p>\"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.</p> <p>\"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License.</p> <p>\"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.</p> <p>\"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types.</p> <p>\"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below).</p> <p>\"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.</p> <p>\"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\"</p> <p>\"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.</p> <ol> <li> <p>Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.</p> </li> <li> <p>Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.</p> </li> <li> <p>Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:</p> </li> </ol> <p>(a) You must give any other recipients of the Work or Derivative Works a copy of this License; and</p> <p>(b) You must cause any modified files to carry prominent notices stating that You changed the files; and</p> <p>(c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and</p> <p>(d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License.</p> <p>You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.</p> <ol> <li> <p>Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.</p> </li> <li> <p>Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.</p> </li> <li> <p>Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.</p> </li> <li> <p>Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.</p> </li> <li> <p>Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.</p> </li> </ol> <p>END OF TERMS AND CONDITIONS</p> <p>APPENDIX: How to apply the Apache License to your work.</p> <p>To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!)  The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives.</p> <p>Copyright 2023 Unai Ler\u00eda Fortea &amp; Pablo Vizca\u00edno Garc\u00eda</p> <p>Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at</p> <p>http://www.apache.org/licenses/LICENSE-2.0</p> <p>Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.</p>"},{"location":"SUMMARY/","title":"SUMMARY","text":"<ul> <li>reference<ul> <li>itfit<ul> <li>data<ul> <li>data_classes</li> </ul> </li> <li>data_selectors<ul> <li>lasso</li> </ul> </li> <li>fit_functions<ul> <li>exponential</li> <li>gaussian</li> <li>generic_fitter</li> <li>linear</li> <li>lorentzian</li> <li>quadratic</li> </ul> </li> <li>fitter_app</li> <li>plot<ul> <li>builder</li> <li>labels</li> <li>spines</li> </ul> </li> <li>utils<ul> <li>blit_manager</li> <li>collection</li> <li>exponential</li> <li>fit_container</li> <li>gaussian</li> <li>line</li> <li>lorentzian</li> <li>point</li> <li>quadratic</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/itfit/","title":"Index","text":"<p>TODO</p>"},{"location":"reference/itfit/fitter_app/","title":"Fitter app","text":""},{"location":"reference/itfit/fitter_app/#itfit.fitter_app.Fitter","title":"<code>Fitter</code>","text":"Source code in <code>itfit/fitter_app.py</code> <pre><code>class Fitter:\n    data : data.DataSelection\n    figure : Figure\n    ax : Axes\n    fits : dict[int, utils.FitResultContainer]\n    selections : dict\n    blit_manager : utils.BlitManager\n\n    _last_fit : int\n    def __init__(self, xdata, ydata, *args, **kargs):\n        self.data = DataSelection(xdata, ydata)\n        self.figure = plt.figure()\n        self.ax = self.figure.gca()\n        self.fits: dict[int, FitResultContainer] = {}\n        self.selections = {}\n        self.blit_manager = BlitManager(self)\n        self._last_fit = None\n\n\n    def __call__(self):\n        self.data_line = self.ax.plot(self.data.xdata, self.data.ydata)\n\n        self.figure.canvas.manager.toolmanager.add_tool('Lasso', LassoTool, app=self,data=self.data)\n        self.figure.canvas.manager.toolbar.add_tool('Lasso', 'fitter')\n\n        self.figure.canvas.manager.toolmanager.add_tool('Line', LineTool, app=self, data=self.data)\n        self.figure.canvas.manager.toolbar.add_tool('Line', 'fitter')\n\n        self.figure.canvas.manager.toolmanager.add_tool('Quadratic', QuadraticTool, app=self, data=self.data)\n        self.figure.canvas.manager.toolbar.add_tool('Quadratic', 'fitter')\n\n        self.figure.canvas.manager.toolmanager.add_tool('Exponential', ExponentialTool, app=self, data=self.data)\n        self.figure.canvas.manager.toolbar.add_tool('Exponential', 'fitter')\n\n        self.figure.canvas.manager.toolmanager.add_tool('Gaussian', GaussianTool, app=self,data=self.data)\n        self.figure.canvas.manager.toolbar.add_tool('Gaussian', 'fitter')\n\n        self.figure.canvas.manager.toolmanager.add_tool('Lorentzian', LorentzianTool, app=self,data=self.data)\n        self.figure.canvas.manager.toolbar.add_tool('Lorentzian', 'fitter')\n\n    def _add_fit(self, fit: FitResultContainer):\n\"\"\"Adds the fit to the application\n\n        Parameters:\n            fit (FitResultContainer):\n                Fit to add\n        \"\"\"\n        self._last_fit = hash(fit)\n        self.fits.update({self._last_fit: fit})\n\n    def get_last_fit(self):\n\"\"\"Returns the last fit\n\n        Returns:\n            (FitResultContainer): Fit result container.\n        \"\"\"\n        return self.fits.get(self._last_fit) if (self._last_fit is not None) else None\n\n\n    def get_plot_builder(self):\n\"\"\"Returns a itfit.plot.PlotBuilder instance. Used to ease plot creation.\n        \"\"\"\n\n        fit = self.get_last_fit()\n        return PlotBuilder(self, fit)\n\n    def default_plot_last_fit(self, xlabel: str, ylabel: str, title: str):\n\"\"\"Plots last fit with default configuration:\n        ```py\n        .plot_data(label=\"Data\")\\\n        .with_fit(label=fit.fit_manager.name.capitalize())\\\n        .xlabel(xlabel).ylabel(ylabel).title(title)\\\n\n        .spines()\\\n            .start_top_spine().invisible().end_top_spine()\\\n            .start_right_spine().invisible().end_right_spine()\\\n        .end_spines()\\\n\n        .grid().legend().tight_layout()\n        ```\n\n        Args:\n            xlabel (str): x label.\n            ylabel (str): y label.\n            title (str): title.\n\n        Returns:\n            (itfit.plot.PlotBuilder): PlotBuilder to continue plot customization.\n        \"\"\"\n        fit = self.get_last_fit()\n        return PlotBuilder(self, fit)\\\n            .plot_data(label=\"Data\")\\\n            .with_fit(label=fit.fit_manager.name.capitalize())\\\n            .xlabel(xlabel).ylabel(ylabel).title(title)\\\n            .spines()\\\n                .start_top_spine().invisible().end_top_spine()\\\n                .start_right_spine().invisible().end_right_spine()\\\n            .end_spines()\\\n            .grid().legend().tight_layout()\n</code></pre>"},{"location":"reference/itfit/fitter_app/#itfit.fitter_app.Fitter.default_plot_last_fit","title":"<code>default_plot_last_fit(xlabel, ylabel, title)</code>","text":"<p>Plots last fit with default configuration:</p> <pre><code>.plot_data(label=\"Data\")        .with_fit(label=fit.fit_manager.name.capitalize())        .xlabel(xlabel).ylabel(ylabel).title(title)            \n.spines()            .start_top_spine().invisible().end_top_spine()            .start_right_spine().invisible().end_right_spine()        .end_spines()            \n.grid().legend().tight_layout()\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>xlabel</code> <code>str</code> <p>x label.</p> required <code>ylabel</code> <code>str</code> <p>y label.</p> required <code>title</code> <code>str</code> <p>title.</p> required <p>Returns:</p> Type Description <code>itfit.plot.PlotBuilder</code> <p>PlotBuilder to continue plot customization.</p> Source code in <code>itfit/fitter_app.py</code> <pre><code>def default_plot_last_fit(self, xlabel: str, ylabel: str, title: str):\n\"\"\"Plots last fit with default configuration:\n    ```py\n    .plot_data(label=\"Data\")\\\n    .with_fit(label=fit.fit_manager.name.capitalize())\\\n    .xlabel(xlabel).ylabel(ylabel).title(title)\\\n\n    .spines()\\\n        .start_top_spine().invisible().end_top_spine()\\\n        .start_right_spine().invisible().end_right_spine()\\\n    .end_spines()\\\n\n    .grid().legend().tight_layout()\n    ```\n\n    Args:\n        xlabel (str): x label.\n        ylabel (str): y label.\n        title (str): title.\n\n    Returns:\n        (itfit.plot.PlotBuilder): PlotBuilder to continue plot customization.\n    \"\"\"\n    fit = self.get_last_fit()\n    return PlotBuilder(self, fit)\\\n        .plot_data(label=\"Data\")\\\n        .with_fit(label=fit.fit_manager.name.capitalize())\\\n        .xlabel(xlabel).ylabel(ylabel).title(title)\\\n        .spines()\\\n            .start_top_spine().invisible().end_top_spine()\\\n            .start_right_spine().invisible().end_right_spine()\\\n        .end_spines()\\\n        .grid().legend().tight_layout()\n</code></pre>"},{"location":"reference/itfit/fitter_app/#itfit.fitter_app.Fitter.get_last_fit","title":"<code>get_last_fit()</code>","text":"<p>Returns the last fit</p> <p>Returns:</p> Type Description <code>FitResultContainer</code> <p>Fit result container.</p> Source code in <code>itfit/fitter_app.py</code> <pre><code>def get_last_fit(self):\n\"\"\"Returns the last fit\n\n    Returns:\n        (FitResultContainer): Fit result container.\n    \"\"\"\n    return self.fits.get(self._last_fit) if (self._last_fit is not None) else None\n</code></pre>"},{"location":"reference/itfit/fitter_app/#itfit.fitter_app.Fitter.get_plot_builder","title":"<code>get_plot_builder()</code>","text":"<p>Returns a itfit.plot.PlotBuilder instance. Used to ease plot creation.</p> Source code in <code>itfit/fitter_app.py</code> <pre><code>def get_plot_builder(self):\n\"\"\"Returns a itfit.plot.PlotBuilder instance. Used to ease plot creation.\n    \"\"\"\n\n    fit = self.get_last_fit()\n    return PlotBuilder(self, fit)\n</code></pre>"},{"location":"reference/itfit/data/","title":"Index","text":"<p>TODO</p>"},{"location":"reference/itfit/data/data_classes/","title":"Data classes","text":""},{"location":"reference/itfit/data/data_classes/#itfit.data.data_classes.DataContainer","title":"<code>DataContainer</code>","text":"<p>Container for data.</p> Source code in <code>itfit/data/data_classes.py</code> <pre><code>class DataContainer:\n\"\"\"Container for data.\n    \"\"\"\n    def __init__(self, xdata: list, ydata: list):\n\"\"\"Creates a DataContainer.\n\n        Parameters:\n            xdata (List[float]):\n                x data.\n            ydata (List[float]):\n                y data.\n        \"\"\"\n        self.xdata = np.array(xdata).copy()\n        self.ydata = np.array(ydata).copy()\n\n    def length(self):\n\"\"\"Returns lenght of data.\n\n        Returns:\n            (int):\n                lenght of data.\n        \"\"\"\n        return self.xdata.size\n\n    def get_data(self):\n\"\"\"Returns data. As list of tuples: `lenght x 2`.\n\n        Returns:\n            (Tuple[Tuple[float, float]]):\n                Data stored.\n        \"\"\"\n        return np.array((self.xdata, self.ydata)).T\n</code></pre>"},{"location":"reference/itfit/data/data_classes/#itfit.data.data_classes.DataContainer.__init__","title":"<code>__init__(xdata, ydata)</code>","text":"<p>Creates a DataContainer.</p> <p>Parameters:</p> Name Type Description Default <code>xdata</code> <code>List[float]</code> <p>x data.</p> required <code>ydata</code> <code>List[float]</code> <p>y data.</p> required Source code in <code>itfit/data/data_classes.py</code> <pre><code>def __init__(self, xdata: list, ydata: list):\n\"\"\"Creates a DataContainer.\n\n    Parameters:\n        xdata (List[float]):\n            x data.\n        ydata (List[float]):\n            y data.\n    \"\"\"\n    self.xdata = np.array(xdata).copy()\n    self.ydata = np.array(ydata).copy()\n</code></pre>"},{"location":"reference/itfit/data/data_classes/#itfit.data.data_classes.DataContainer.get_data","title":"<code>get_data()</code>","text":"<p>Returns data. As list of tuples: <code>lenght x 2</code>.</p> <p>Returns:</p> Type Description <code>Tuple[Tuple[float, float]]</code> <p>Data stored.</p> Source code in <code>itfit/data/data_classes.py</code> <pre><code>def get_data(self):\n\"\"\"Returns data. As list of tuples: `lenght x 2`.\n\n    Returns:\n        (Tuple[Tuple[float, float]]):\n            Data stored.\n    \"\"\"\n    return np.array((self.xdata, self.ydata)).T\n</code></pre>"},{"location":"reference/itfit/data/data_classes/#itfit.data.data_classes.DataContainer.length","title":"<code>length()</code>","text":"<p>Returns lenght of data.</p> <p>Returns:</p> Type Description <code>int</code> <p>lenght of data.</p> Source code in <code>itfit/data/data_classes.py</code> <pre><code>def length(self):\n\"\"\"Returns lenght of data.\n\n    Returns:\n        (int):\n            lenght of data.\n    \"\"\"\n    return self.xdata.size\n</code></pre>"},{"location":"reference/itfit/data/data_classes/#itfit.data.data_classes.DataSelection","title":"<code>DataSelection</code>","text":"<p>         Bases: <code>DataContainer</code></p> Source code in <code>itfit/data/data_classes.py</code> <pre><code>class DataSelection(DataContainer):\n    def __init__(self, xdata, ydata):\n        super().__init__(xdata, ydata)\n        self.indexes_used = np.ones(len(self.xdata), dtype=bool)\n\n    # def __init__(self, data: DataContainer):\n    #     self = DataContainer\n    #     self.indexes_used = np.ones(len(self.xdata), dtype=bool)\n\n    def select_all(self):\n\"\"\"Selects all data.\n        \"\"\"\n        self.indexes_used[:] = True\n\n    def select_none(self):\n\"\"\"Unselect all data.\n        \"\"\"\n        self.indexes_used[:] = False\n\n    def add_selection(self, indexes: list):\n\"\"\"Adds `indexes` to `indexes_used`.\n\n        Parameters:\n            indexes (List): \n                List of index.\n        \"\"\"\n        self.indexes_used[np.array(indexes)] = True\n\n    def selection(self, indexes):\n\"\"\"Erase previous selected indexes. Adds `indexes` to `indexes_used`.\n\n        Parameters:\n            indexes (List):\n                List of index.\n        \"\"\"\n        self.indexes_used[:] = False\n        self.add_selection(indexes)\n\n    def bool_selection(self, indexes_used):\n\"\"\"Erase previous selected indexes. Sets new `indexes_used`.\n\n        Parameters:\n            indexes_used (List):\n                List of booleans. True if index used, False otherwise.\n        \"\"\"\n        self.indexes_used[:] = indexes_used[:]\n\n    def get_selected(self):\n\"\"\"Returns the selected data.\n\n        Returns:\n            (Tuple[Tuple[float], Tuple[float]]):\n                Tuple containing x and y selected data in arrays.\n        \"\"\"\n        return self.xdata[self.indexes_used], self.ydata[self.indexes_used]\n\n    def get_not_selected(self):\n\"\"\"Returns the not selected data.\n\n        Returns:\n            (Tuple[Tuple[float], Tuple[float]]):\n                Tuple containing x and y not selected data in arrays.\n        \"\"\"\n        return self.xdata[~self.indexes_used], self.ydata[~self.indexes_used]\n\n    def get_colors(self, color_in, color_out):\n\"\"\"Returns a list of colours depending if same index data is selected or not.\n\n        Parameters:\n            color_in (Tuple[float,float,float,float]):\n                Colour for selected data.\n            color_out (Tuple[float,float,float,float]):\n                Colour for unselected data.\n\n        Returns:\n            (Tuple[Tuple[float,float,float,float]]):\n                A list of colours.\n        \"\"\"\n        colors = np.zeros((self.length(),4))\n        colors[self.indexes_used,:] = color_in[:]\n        colors[~self.indexes_used,:] = color_out[:]\n        return colors\n</code></pre>"},{"location":"reference/itfit/data/data_classes/#itfit.data.data_classes.DataSelection.add_selection","title":"<code>add_selection(indexes)</code>","text":"<p>Adds <code>indexes</code> to <code>indexes_used</code>.</p> <p>Parameters:</p> Name Type Description Default <code>indexes</code> <code>List</code> <p>List of index.</p> required Source code in <code>itfit/data/data_classes.py</code> <pre><code>def add_selection(self, indexes: list):\n\"\"\"Adds `indexes` to `indexes_used`.\n\n    Parameters:\n        indexes (List): \n            List of index.\n    \"\"\"\n    self.indexes_used[np.array(indexes)] = True\n</code></pre>"},{"location":"reference/itfit/data/data_classes/#itfit.data.data_classes.DataSelection.bool_selection","title":"<code>bool_selection(indexes_used)</code>","text":"<p>Erase previous selected indexes. Sets new <code>indexes_used</code>.</p> <p>Parameters:</p> Name Type Description Default <code>indexes_used</code> <code>List</code> <p>List of booleans. True if index used, False otherwise.</p> required Source code in <code>itfit/data/data_classes.py</code> <pre><code>def bool_selection(self, indexes_used):\n\"\"\"Erase previous selected indexes. Sets new `indexes_used`.\n\n    Parameters:\n        indexes_used (List):\n            List of booleans. True if index used, False otherwise.\n    \"\"\"\n    self.indexes_used[:] = indexes_used[:]\n</code></pre>"},{"location":"reference/itfit/data/data_classes/#itfit.data.data_classes.DataSelection.get_colors","title":"<code>get_colors(color_in, color_out)</code>","text":"<p>Returns a list of colours depending if same index data is selected or not.</p> <p>Parameters:</p> Name Type Description Default <code>color_in</code> <code>Tuple[float, float, float, float]</code> <p>Colour for selected data.</p> required <code>color_out</code> <code>Tuple[float, float, float, float]</code> <p>Colour for unselected data.</p> required <p>Returns:</p> Type Description <code>Tuple[Tuple[float, float, float, float]]</code> <p>A list of colours.</p> Source code in <code>itfit/data/data_classes.py</code> <pre><code>def get_colors(self, color_in, color_out):\n\"\"\"Returns a list of colours depending if same index data is selected or not.\n\n    Parameters:\n        color_in (Tuple[float,float,float,float]):\n            Colour for selected data.\n        color_out (Tuple[float,float,float,float]):\n            Colour for unselected data.\n\n    Returns:\n        (Tuple[Tuple[float,float,float,float]]):\n            A list of colours.\n    \"\"\"\n    colors = np.zeros((self.length(),4))\n    colors[self.indexes_used,:] = color_in[:]\n    colors[~self.indexes_used,:] = color_out[:]\n    return colors\n</code></pre>"},{"location":"reference/itfit/data/data_classes/#itfit.data.data_classes.DataSelection.get_not_selected","title":"<code>get_not_selected()</code>","text":"<p>Returns the not selected data.</p> <p>Returns:</p> Type Description <code>Tuple[Tuple[float], Tuple[float]]</code> <p>Tuple containing x and y not selected data in arrays.</p> Source code in <code>itfit/data/data_classes.py</code> <pre><code>def get_not_selected(self):\n\"\"\"Returns the not selected data.\n\n    Returns:\n        (Tuple[Tuple[float], Tuple[float]]):\n            Tuple containing x and y not selected data in arrays.\n    \"\"\"\n    return self.xdata[~self.indexes_used], self.ydata[~self.indexes_used]\n</code></pre>"},{"location":"reference/itfit/data/data_classes/#itfit.data.data_classes.DataSelection.get_selected","title":"<code>get_selected()</code>","text":"<p>Returns the selected data.</p> <p>Returns:</p> Type Description <code>Tuple[Tuple[float], Tuple[float]]</code> <p>Tuple containing x and y selected data in arrays.</p> Source code in <code>itfit/data/data_classes.py</code> <pre><code>def get_selected(self):\n\"\"\"Returns the selected data.\n\n    Returns:\n        (Tuple[Tuple[float], Tuple[float]]):\n            Tuple containing x and y selected data in arrays.\n    \"\"\"\n    return self.xdata[self.indexes_used], self.ydata[self.indexes_used]\n</code></pre>"},{"location":"reference/itfit/data/data_classes/#itfit.data.data_classes.DataSelection.select_all","title":"<code>select_all()</code>","text":"<p>Selects all data.</p> Source code in <code>itfit/data/data_classes.py</code> <pre><code>def select_all(self):\n\"\"\"Selects all data.\n    \"\"\"\n    self.indexes_used[:] = True\n</code></pre>"},{"location":"reference/itfit/data/data_classes/#itfit.data.data_classes.DataSelection.select_none","title":"<code>select_none()</code>","text":"<p>Unselect all data.</p> Source code in <code>itfit/data/data_classes.py</code> <pre><code>def select_none(self):\n\"\"\"Unselect all data.\n    \"\"\"\n    self.indexes_used[:] = False\n</code></pre>"},{"location":"reference/itfit/data/data_classes/#itfit.data.data_classes.DataSelection.selection","title":"<code>selection(indexes)</code>","text":"<p>Erase previous selected indexes. Adds <code>indexes</code> to <code>indexes_used</code>.</p> <p>Parameters:</p> Name Type Description Default <code>indexes</code> <code>List</code> <p>List of index.</p> required Source code in <code>itfit/data/data_classes.py</code> <pre><code>def selection(self, indexes):\n\"\"\"Erase previous selected indexes. Adds `indexes` to `indexes_used`.\n\n    Parameters:\n        indexes (List):\n            List of index.\n    \"\"\"\n    self.indexes_used[:] = False\n    self.add_selection(indexes)\n</code></pre>"},{"location":"reference/itfit/data_selectors/","title":"Index","text":"<p>TODO</p>"},{"location":"reference/itfit/data_selectors/lasso/","title":"Lasso","text":""},{"location":"reference/itfit/data_selectors/lasso/#itfit.data_selectors.lasso.LassoManager","title":"<code>LassoManager</code>","text":"Source code in <code>itfit/data_selectors/lasso.py</code> <pre><code>class LassoManager:\n\"\"\"\n    \"\"\"\n    def __init__(self, app, data: DataSelection):\n\"\"\"Creates a lasso selector and applies the selection to the given data.\n\n        Parameters:\n            app (Fitter):\n                Main application.\n            data (DataSelection): \n                Data to apply selection.\n        \"\"\"\n        self.app = app\n        self.axes = app.ax\n        self.canvas = self.axes.figure.canvas\n        self.data = data\n\n        self.Nxy = len(data.xdata)\n\n        self.data.select_all()\n\n        self.data.select_none()\n\n        self.data_ploted = self.axes.plot(\n            data.xdata, data.ydata, color=(0, 0, 0, 0))\n\n        self.cid = self.canvas.mpl_connect('button_press_event', self.on_press)\n\n        self.collection_facecolors = self.data.get_colors(\n            (0, 1, 0, 1), (1, 0, 0, 1))\n        self.collection = RegularPolyCollection(\n            6, sizes=(40,),\n            facecolors=self.collection_facecolors,\n            offsets=self.data.get_data(),\n            offset_transform=self.axes.transData)\n\n        self.axes.add_collection(self.collection)\n\n    def callback(self, verts):\n        facecolors = self.collection.get_facecolors()\n        # self.data_ploted.get_\n        p = path.Path(verts)\n        ind = p.contains_points(self.data.get_data())\n\n        self.data.bool_selection(ind)\n        facecolors = self.data.get_colors((0, 1, 0, 1), (1, 0, 0, 1))\n\n        self.collection.set_facecolors(facecolors)\n        self.delete()\n\n    def delete(self):\n        if hasattr(self, \"lasso\"):\n            self.canvas.draw_idle()\n            self.canvas.widgetlock.release(self.lasso)\n            del self.lasso\n        plt.disconnect(self.cid)\n        self.cid = None\n\n    def on_press(self, event):\n        if self.canvas.widgetlock.locked():\n            return\n        if event.inaxes is None:\n            return\n        self.lasso = Lasso(event.inaxes,\n                           (event.xdata, event.ydata),\n                           self.callback)\n        # acquire a lock on the widget drawing\n        self.canvas.widgetlock(self.lasso)\n</code></pre>"},{"location":"reference/itfit/data_selectors/lasso/#itfit.data_selectors.lasso.LassoManager.__init__","title":"<code>__init__(app, data)</code>","text":"<p>Creates a lasso selector and applies the selection to the given data.</p> <p>Parameters:</p> Name Type Description Default <code>app</code> <code>Fitter</code> <p>Main application.</p> required <code>data</code> <code>DataSelection</code> <p>Data to apply selection.</p> required Source code in <code>itfit/data_selectors/lasso.py</code> <pre><code>def __init__(self, app, data: DataSelection):\n\"\"\"Creates a lasso selector and applies the selection to the given data.\n\n    Parameters:\n        app (Fitter):\n            Main application.\n        data (DataSelection): \n            Data to apply selection.\n    \"\"\"\n    self.app = app\n    self.axes = app.ax\n    self.canvas = self.axes.figure.canvas\n    self.data = data\n\n    self.Nxy = len(data.xdata)\n\n    self.data.select_all()\n\n    self.data.select_none()\n\n    self.data_ploted = self.axes.plot(\n        data.xdata, data.ydata, color=(0, 0, 0, 0))\n\n    self.cid = self.canvas.mpl_connect('button_press_event', self.on_press)\n\n    self.collection_facecolors = self.data.get_colors(\n        (0, 1, 0, 1), (1, 0, 0, 1))\n    self.collection = RegularPolyCollection(\n        6, sizes=(40,),\n        facecolors=self.collection_facecolors,\n        offsets=self.data.get_data(),\n        offset_transform=self.axes.transData)\n\n    self.axes.add_collection(self.collection)\n</code></pre>"},{"location":"reference/itfit/data_selectors/lasso/#itfit.data_selectors.lasso.LassoTool","title":"<code>LassoTool</code>","text":"<p>         Bases: <code>ToolToggleBase</code></p> <p>Toggles Lasso Tool.</p> Source code in <code>itfit/data_selectors/lasso.py</code> <pre><code>class LassoTool(ToolToggleBase):\n\"\"\"Toggles Lasso Tool.\"\"\"\n    # default_keymap = ''\n    description = 'Lasso me please'\n    default_toggled = False\n    radio_group = \"fitter\"\n\n    def __init__(self, *args, app, data: DataSelection, **kwargs):\n\"\"\"Creates a lasso tool.\n\n        Parameters:\n            app (Fitter): \n                Main application.\n            data (DataSelection): \n                Data to apply selection.\n        \"\"\"\n        self.app = app\n        self.data = data\n        super().__init__(*args, **kwargs)\n\n    def enable(self, *args):\n\"\"\"Enables the lasso tool. Interaction is locked until mouse button is released.\n        \"\"\"\n        self.lasso_manager = LassoManager(self.app, self.data)\n\n    def disable(self, *args):\n\"\"\"Disables the lasso tool. After tool unselect or data selection applied.\n        \"\"\"\n        self.lasso_manager.delete()\n</code></pre>"},{"location":"reference/itfit/data_selectors/lasso/#itfit.data_selectors.lasso.LassoTool.__init__","title":"<code>__init__(*args, app, data, **kwargs)</code>","text":"<p>Creates a lasso tool.</p> <p>Parameters:</p> Name Type Description Default <code>app</code> <code>Fitter</code> <p>Main application.</p> required <code>data</code> <code>DataSelection</code> <p>Data to apply selection.</p> required Source code in <code>itfit/data_selectors/lasso.py</code> <pre><code>def __init__(self, *args, app, data: DataSelection, **kwargs):\n\"\"\"Creates a lasso tool.\n\n    Parameters:\n        app (Fitter): \n            Main application.\n        data (DataSelection): \n            Data to apply selection.\n    \"\"\"\n    self.app = app\n    self.data = data\n    super().__init__(*args, **kwargs)\n</code></pre>"},{"location":"reference/itfit/data_selectors/lasso/#itfit.data_selectors.lasso.LassoTool.disable","title":"<code>disable(*args)</code>","text":"<p>Disables the lasso tool. After tool unselect or data selection applied.</p> Source code in <code>itfit/data_selectors/lasso.py</code> <pre><code>def disable(self, *args):\n\"\"\"Disables the lasso tool. After tool unselect or data selection applied.\n    \"\"\"\n    self.lasso_manager.delete()\n</code></pre>"},{"location":"reference/itfit/data_selectors/lasso/#itfit.data_selectors.lasso.LassoTool.enable","title":"<code>enable(*args)</code>","text":"<p>Enables the lasso tool. Interaction is locked until mouse button is released.</p> Source code in <code>itfit/data_selectors/lasso.py</code> <pre><code>def enable(self, *args):\n\"\"\"Enables the lasso tool. Interaction is locked until mouse button is released.\n    \"\"\"\n    self.lasso_manager = LassoManager(self.app, self.data)\n</code></pre>"},{"location":"reference/itfit/fit_functions/","title":"Index","text":"<p>TODO</p>"},{"location":"reference/itfit/fit_functions/exponential/","title":"Exponential","text":""},{"location":"reference/itfit/fit_functions/exponential/#itfit.fit_functions.exponential.ExponentialFitter","title":"<code>ExponentialFitter</code>","text":"<p>         Bases: <code>GenericFitter</code></p> <p>Exponential function fitter.</p> Source code in <code>itfit/fit_functions/exponential.py</code> <pre><code>class ExponentialFitter(GenericFitter):\n\"\"\"Exponential function fitter.\"\"\"\n    name = 'exponential'\n\n    def __init__(self,app,data: DataSelection):\n\"\"\" Exponential fitter following function `f(x) = a*exp(b*x)`\n\n        Parameters:\n            app (Fitter): \n                Main application.\n            data (DataSelection): \n                Data to fit.\n        \"\"\"\n\n        super().__init__(app,data)\n\n        ## Create DragPoints and DragLines needed\n\n        self.drag_points = [DragPoint(*self.ax.transAxes.transform((0.4,0.2)), None),\n                            DragPoint(*self.ax.transAxes.transform((0.3,0.5)), None)]\n        self.drag_points_managers = [DragPointManager(p,self.app.blit_manager) for p in self.drag_points]\n        self.fitter_drag_collection = DragExponentialManager(self.drag_points, self.app.blit_manager)\n\n        ## Connect Exponential to Points change events\n\n        self.drag_points_cids = [] #Connection ids for change events\n        for dp in self.drag_points_managers:\n            self.drag_points_cids.append(\n                dp.connect(self.fitter_drag_collection.update)\n            )\n\n        ## Add created DragPoints and DragLines to BlitManager's artists\n        self.app.blit_manager.artists.append(self.fitter_drag_collection)\n        for dpm in self.drag_points_managers:\n            self.app.blit_manager.artists.append(dpm)\n        self.fig.canvas.draw_idle()\n</code></pre>"},{"location":"reference/itfit/fit_functions/exponential/#itfit.fit_functions.exponential.ExponentialFitter.__init__","title":"<code>__init__(app, data)</code>","text":"<p>Exponential fitter following function <code>f(x) = a*exp(b*x)</code></p> <p>Parameters:</p> Name Type Description Default <code>app</code> <code>Fitter</code> <p>Main application.</p> required <code>data</code> <code>DataSelection</code> <p>Data to fit.</p> required Source code in <code>itfit/fit_functions/exponential.py</code> <pre><code>def __init__(self,app,data: DataSelection):\n\"\"\" Exponential fitter following function `f(x) = a*exp(b*x)`\n\n    Parameters:\n        app (Fitter): \n            Main application.\n        data (DataSelection): \n            Data to fit.\n    \"\"\"\n\n    super().__init__(app,data)\n\n    ## Create DragPoints and DragLines needed\n\n    self.drag_points = [DragPoint(*self.ax.transAxes.transform((0.4,0.2)), None),\n                        DragPoint(*self.ax.transAxes.transform((0.3,0.5)), None)]\n    self.drag_points_managers = [DragPointManager(p,self.app.blit_manager) for p in self.drag_points]\n    self.fitter_drag_collection = DragExponentialManager(self.drag_points, self.app.blit_manager)\n\n    ## Connect Exponential to Points change events\n\n    self.drag_points_cids = [] #Connection ids for change events\n    for dp in self.drag_points_managers:\n        self.drag_points_cids.append(\n            dp.connect(self.fitter_drag_collection.update)\n        )\n\n    ## Add created DragPoints and DragLines to BlitManager's artists\n    self.app.blit_manager.artists.append(self.fitter_drag_collection)\n    for dpm in self.drag_points_managers:\n        self.app.blit_manager.artists.append(dpm)\n    self.fig.canvas.draw_idle()\n</code></pre>"},{"location":"reference/itfit/fit_functions/exponential/#itfit.fit_functions.exponential.ExponentialTool","title":"<code>ExponentialTool</code>","text":"<p>         Bases: <code>GenericFitterTool</code></p> <p>Toggles Exponential Tool.</p> Source code in <code>itfit/fit_functions/exponential.py</code> <pre><code>class ExponentialTool(GenericFitterTool):\n\"\"\" Toggles Exponential Tool.\"\"\"\n\n    # default_keymap = '' \n    description = 'Exponentiate me please'\n    default_toggled = False \n    radio_group = 'fitter'\n\n    def enable(self,*args):\n\"\"\"Triggered when ExponentialTool is enabled.\n        Uses BLitManager for faster rendering of DragObjects.\n        \"\"\" \n        super().enable()\n        self.fitter = ExponentialFitter(self.app, self.data)\n\n    def disable(self,*args):\n\"\"\" Triggered when ExponentialTool is disabled\n        Removes DragObjects and disables BLitManager.\n        \"\"\" \n        super().disable()\n</code></pre>"},{"location":"reference/itfit/fit_functions/exponential/#itfit.fit_functions.exponential.ExponentialTool.disable","title":"<code>disable(*args)</code>","text":"<p>Triggered when ExponentialTool is disabled Removes DragObjects and disables BLitManager.</p> Source code in <code>itfit/fit_functions/exponential.py</code> <pre><code>def disable(self,*args):\n\"\"\" Triggered when ExponentialTool is disabled\n    Removes DragObjects and disables BLitManager.\n    \"\"\" \n    super().disable()\n</code></pre>"},{"location":"reference/itfit/fit_functions/exponential/#itfit.fit_functions.exponential.ExponentialTool.enable","title":"<code>enable(*args)</code>","text":"<p>Triggered when ExponentialTool is enabled. Uses BLitManager for faster rendering of DragObjects.</p> Source code in <code>itfit/fit_functions/exponential.py</code> <pre><code>def enable(self,*args):\n\"\"\"Triggered when ExponentialTool is enabled.\n    Uses BLitManager for faster rendering of DragObjects.\n    \"\"\" \n    super().enable()\n    self.fitter = ExponentialFitter(self.app, self.data)\n</code></pre>"},{"location":"reference/itfit/fit_functions/gaussian/","title":"Gaussian","text":""},{"location":"reference/itfit/fit_functions/gaussian/#itfit.fit_functions.gaussian.GaussianFitter","title":"<code>GaussianFitter</code>","text":"<p>         Bases: <code>GenericFitter</code></p> <p>Gaussian function fitter.</p> Source code in <code>itfit/fit_functions/gaussian.py</code> <pre><code>class GaussianFitter(GenericFitter):\n\"\"\"Gaussian function fitter.\"\"\"\n    name = 'gaussian'\n\n    def __init__(self,app,data: DataSelection):\n\"\"\" Gaussian fitter following function `f(x) = A*exp(0.5*(x-m)^2/s^2)`\n\n        Parameters:\n            app (Fitter): \n                Main application.\n            data (DataSelection): \n                Data to fit.\n        \"\"\"\n\n        super().__init__(app,data)\n\n        ## Create DragPoints and DragLines needed\n\n        self.drag_points = [DragPoint(*self.ax.transAxes.transform((0.5,0.7)), None),\n                            DragPoint(*self.ax.transAxes.transform((0.7,0.3)), None)]\n        self.drag_points_managers = [DragPointManager(p,self.app.blit_manager) for p in self.drag_points]\n        self.fitter_drag_collection = DragGaussianManager(self.drag_points, self.app.blit_manager)\n\n        ##Connect Gaussian to Points change events\n        self.drag_points_cids = [] #Connections ids for change events\n        for dp in self.drag_points_managers:\n            self.drag_points_cids.append(\n                dp.connect(self.fitter_drag_collection.update)\n            )\n\n        ## Add created DragPoints and DragLines to BlitManager's artists\n        self.app.blit_manager.artists.append(self.fitter_drag_collection)\n        for dpm in self.drag_points_managers:\n            self.app.blit_manager.artists.append(dpm)\n\n        self.fig.canvas.draw_idle()\n</code></pre>"},{"location":"reference/itfit/fit_functions/gaussian/#itfit.fit_functions.gaussian.GaussianFitter.__init__","title":"<code>__init__(app, data)</code>","text":"<p>Gaussian fitter following function <code>f(x) = A*exp(0.5*(x-m)^2/s^2)</code></p> <p>Parameters:</p> Name Type Description Default <code>app</code> <code>Fitter</code> <p>Main application.</p> required <code>data</code> <code>DataSelection</code> <p>Data to fit.</p> required Source code in <code>itfit/fit_functions/gaussian.py</code> <pre><code>def __init__(self,app,data: DataSelection):\n\"\"\" Gaussian fitter following function `f(x) = A*exp(0.5*(x-m)^2/s^2)`\n\n    Parameters:\n        app (Fitter): \n            Main application.\n        data (DataSelection): \n            Data to fit.\n    \"\"\"\n\n    super().__init__(app,data)\n\n    ## Create DragPoints and DragLines needed\n\n    self.drag_points = [DragPoint(*self.ax.transAxes.transform((0.5,0.7)), None),\n                        DragPoint(*self.ax.transAxes.transform((0.7,0.3)), None)]\n    self.drag_points_managers = [DragPointManager(p,self.app.blit_manager) for p in self.drag_points]\n    self.fitter_drag_collection = DragGaussianManager(self.drag_points, self.app.blit_manager)\n\n    ##Connect Gaussian to Points change events\n    self.drag_points_cids = [] #Connections ids for change events\n    for dp in self.drag_points_managers:\n        self.drag_points_cids.append(\n            dp.connect(self.fitter_drag_collection.update)\n        )\n\n    ## Add created DragPoints and DragLines to BlitManager's artists\n    self.app.blit_manager.artists.append(self.fitter_drag_collection)\n    for dpm in self.drag_points_managers:\n        self.app.blit_manager.artists.append(dpm)\n\n    self.fig.canvas.draw_idle()\n</code></pre>"},{"location":"reference/itfit/fit_functions/gaussian/#itfit.fit_functions.gaussian.GaussianTool","title":"<code>GaussianTool</code>","text":"<p>         Bases: <code>GenericFitterTool</code></p> <p>Toggles Gaussian Tool.</p> Source code in <code>itfit/fit_functions/gaussian.py</code> <pre><code>class GaussianTool(GenericFitterTool):\n\"\"\"Toggles Gaussian Tool.\"\"\"\n\n    # default_keymap = ''\n    description = 'Gauss me please'\n    default_toggled = False \n    radio_group = \"fitter\"\n\n    def enable(self,*args):\n\"\"\"Triggered when GaussianTool is enabled,\n        Uses BlitManager for faster rendering of DragObjects.\n        \"\"\"\n\n        super().enable()\n        self.fitter = GaussianFitter(self.app,self.data)\n\n    def disable(self,*args):\n\"\"\"Triggered when GaussianTool is disabled.\n        Removes DragObjects and disables BlitManager.\n        \"\"\"\n\n        super().disable()\n</code></pre>"},{"location":"reference/itfit/fit_functions/gaussian/#itfit.fit_functions.gaussian.GaussianTool.disable","title":"<code>disable(*args)</code>","text":"<p>Triggered when GaussianTool is disabled. Removes DragObjects and disables BlitManager.</p> Source code in <code>itfit/fit_functions/gaussian.py</code> <pre><code>def disable(self,*args):\n\"\"\"Triggered when GaussianTool is disabled.\n    Removes DragObjects and disables BlitManager.\n    \"\"\"\n\n    super().disable()\n</code></pre>"},{"location":"reference/itfit/fit_functions/gaussian/#itfit.fit_functions.gaussian.GaussianTool.enable","title":"<code>enable(*args)</code>","text":"<p>Triggered when GaussianTool is enabled, Uses BlitManager for faster rendering of DragObjects.</p> Source code in <code>itfit/fit_functions/gaussian.py</code> <pre><code>def enable(self,*args):\n\"\"\"Triggered when GaussianTool is enabled,\n    Uses BlitManager for faster rendering of DragObjects.\n    \"\"\"\n\n    super().enable()\n    self.fitter = GaussianFitter(self.app,self.data)\n</code></pre>"},{"location":"reference/itfit/fit_functions/generic_fitter/","title":"Generic fitter","text":""},{"location":"reference/itfit/fit_functions/generic_fitter/#itfit.fit_functions.generic_fitter.GenericFitter","title":"<code>GenericFitter</code>","text":"<p>GenericFitter is a base implementation of a fit function. All fit functions must inherit GenericFitter.</p> Source code in <code>itfit/fit_functions/generic_fitter.py</code> <pre><code>class GenericFitter:\n\"\"\"GenericFitter is a base implementation of a fit function.\n    All fit functions must inherit GenericFitter.\"\"\"\n\n    name = \"generic\"\n\n    @staticmethod\n    def function(x,*args):\n\"\"\"Fit function: `f(x,*args)=...`.\n\n        Parameters:\n            x (float):\n                Independent variable.\n            *args (list[float,...]):\n                0, 1 or multiple arguments.\n        Returns:\n            (Float):\n                `f(x, *args)`\n        \"\"\"\n        ...\n\n    def __init__(self, app, data: DataSelection):\n\"\"\"Generic fitter constructor.\n\n        Parameters:\n            app (Fitter):\n                Main application.\n            data (DataSelection):\n                Data to fit.\n        \"\"\"\n        self.app = app\n        self.fig = app.figure\n        self.ax = app.ax\n        self.data = data\n\n        self.fitter_drag_collection: DragPointCollection\n\n        # TODO: this may change when dedicated ui is implemented\n        self.button_axes = plt.axes([0.81, 0.000001, 0.1, 0.055])\n        self.button = Button(self.button_axes, \"Fit\",color=\"red\")\n        self.button.on_clicked(self.on_fit)\n\n    def get_args(self):\n\"\"\"Return arguments needed for `self.function`.\n\n        Returns:\n            (Tuple[float]):\n                0, 1 or multiple arguments.\n        \"\"\"\n        return self.fitter_drag_collection.get_args()\n\n    def on_fit(self, event):\n\"\"\"Event for fit button.\n\n        Parameters:\n            event (Matplotlib event): \n                Not used\n        \"\"\"\n\n        # If there is not data selected use all data\n        xdata, ydata = self.data.get_selected()\n        if np.sum(self.data.indexes_used)==0:\n            xdata, ydata = self.data.xdata.copy(), self.data.ydata.copy()\n\n        self.fit = optimize.curve_fit(self.fitter_drag_collection.function, xdata, ydata, p0=self.get_args(), full_output=True)\n        fit_result = FitResultContainer(DataContainer(xdata, ydata), self, self.fit)\n\n        # Plot fit line in background\n        with self.app.blit_manager.disabled():\n\n            self.fit_line = Line2D(xdata, self.fitter_drag_collection.function(xdata, *self.fit[0]), linestyle='--')\n            self.ax.add_artist(self.fit_line)\n\n            #TODO: not sure what to do with legends\n            # self.fit_line.set_label(f\"a={self.fit[0][0]}\\nb={self.fit[0][1]}\\nc={self.fit[0][2]}\")\n            # self.ax.legend()\n            self.ax.draw_artist(self.fit_line)\n\n       # Redraw plot to show line     \n        self.app.blit_manager.draw()\n\n        # Save fit in app\n        self.app._add_fit(fit_result)\n\n    def delete(self):\n\"\"\"Remove trigger. Used when tool is disabled.\"\"\"\n        try:\n            del self.button\n            self.button_axes.remove()\n\n            # Remove artists in order to clean canvas\n            for pm in self.drag_points_managers:\n                pm.dragpoint.remove()\n                self.app.blit_manager.artists.remove(pm)\n\n            self.fitter_drag_collection.remove()\n            self.app.blit_manager.artists.remove(self.fitter_drag_collection) \n\n        except AttributeError:\n            pass\n</code></pre>"},{"location":"reference/itfit/fit_functions/generic_fitter/#itfit.fit_functions.generic_fitter.GenericFitter.__init__","title":"<code>__init__(app, data)</code>","text":"<p>Generic fitter constructor.</p> <p>Parameters:</p> Name Type Description Default <code>app</code> <code>Fitter</code> <p>Main application.</p> required <code>data</code> <code>DataSelection</code> <p>Data to fit.</p> required Source code in <code>itfit/fit_functions/generic_fitter.py</code> <pre><code>def __init__(self, app, data: DataSelection):\n\"\"\"Generic fitter constructor.\n\n    Parameters:\n        app (Fitter):\n            Main application.\n        data (DataSelection):\n            Data to fit.\n    \"\"\"\n    self.app = app\n    self.fig = app.figure\n    self.ax = app.ax\n    self.data = data\n\n    self.fitter_drag_collection: DragPointCollection\n\n    # TODO: this may change when dedicated ui is implemented\n    self.button_axes = plt.axes([0.81, 0.000001, 0.1, 0.055])\n    self.button = Button(self.button_axes, \"Fit\",color=\"red\")\n    self.button.on_clicked(self.on_fit)\n</code></pre>"},{"location":"reference/itfit/fit_functions/generic_fitter/#itfit.fit_functions.generic_fitter.GenericFitter.delete","title":"<code>delete()</code>","text":"<p>Remove trigger. Used when tool is disabled.</p> Source code in <code>itfit/fit_functions/generic_fitter.py</code> <pre><code>def delete(self):\n\"\"\"Remove trigger. Used when tool is disabled.\"\"\"\n    try:\n        del self.button\n        self.button_axes.remove()\n\n        # Remove artists in order to clean canvas\n        for pm in self.drag_points_managers:\n            pm.dragpoint.remove()\n            self.app.blit_manager.artists.remove(pm)\n\n        self.fitter_drag_collection.remove()\n        self.app.blit_manager.artists.remove(self.fitter_drag_collection) \n\n    except AttributeError:\n        pass\n</code></pre>"},{"location":"reference/itfit/fit_functions/generic_fitter/#itfit.fit_functions.generic_fitter.GenericFitter.function","title":"<code>function(x, *args)</code>  <code>staticmethod</code>","text":"<p>Fit function: <code>f(x,*args)=...</code>.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>Independent variable.</p> required <code>*args</code> <code>list[float, ...]</code> <p>0, 1 or multiple arguments.</p> <code>()</code> <p>Returns:</p> Type Description <code>Float</code> <p><code>f(x, *args)</code></p> Source code in <code>itfit/fit_functions/generic_fitter.py</code> <pre><code>@staticmethod\ndef function(x,*args):\n\"\"\"Fit function: `f(x,*args)=...`.\n\n    Parameters:\n        x (float):\n            Independent variable.\n        *args (list[float,...]):\n            0, 1 or multiple arguments.\n    Returns:\n        (Float):\n            `f(x, *args)`\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/itfit/fit_functions/generic_fitter/#itfit.fit_functions.generic_fitter.GenericFitter.get_args","title":"<code>get_args()</code>","text":"<p>Return arguments needed for <code>self.function</code>.</p> <p>Returns:</p> Type Description <code>Tuple[float]</code> <p>0, 1 or multiple arguments.</p> Source code in <code>itfit/fit_functions/generic_fitter.py</code> <pre><code>def get_args(self):\n\"\"\"Return arguments needed for `self.function`.\n\n    Returns:\n        (Tuple[float]):\n            0, 1 or multiple arguments.\n    \"\"\"\n    return self.fitter_drag_collection.get_args()\n</code></pre>"},{"location":"reference/itfit/fit_functions/generic_fitter/#itfit.fit_functions.generic_fitter.GenericFitter.on_fit","title":"<code>on_fit(event)</code>","text":"<p>Event for fit button.</p> <p>Parameters:</p> Name Type Description Default <code>event</code> <code>Matplotlib event</code> <p>Not used</p> required Source code in <code>itfit/fit_functions/generic_fitter.py</code> <pre><code>def on_fit(self, event):\n\"\"\"Event for fit button.\n\n    Parameters:\n        event (Matplotlib event): \n            Not used\n    \"\"\"\n\n    # If there is not data selected use all data\n    xdata, ydata = self.data.get_selected()\n    if np.sum(self.data.indexes_used)==0:\n        xdata, ydata = self.data.xdata.copy(), self.data.ydata.copy()\n\n    self.fit = optimize.curve_fit(self.fitter_drag_collection.function, xdata, ydata, p0=self.get_args(), full_output=True)\n    fit_result = FitResultContainer(DataContainer(xdata, ydata), self, self.fit)\n\n    # Plot fit line in background\n    with self.app.blit_manager.disabled():\n\n        self.fit_line = Line2D(xdata, self.fitter_drag_collection.function(xdata, *self.fit[0]), linestyle='--')\n        self.ax.add_artist(self.fit_line)\n\n        #TODO: not sure what to do with legends\n        # self.fit_line.set_label(f\"a={self.fit[0][0]}\\nb={self.fit[0][1]}\\nc={self.fit[0][2]}\")\n        # self.ax.legend()\n        self.ax.draw_artist(self.fit_line)\n\n   # Redraw plot to show line     \n    self.app.blit_manager.draw()\n\n    # Save fit in app\n    self.app._add_fit(fit_result)\n</code></pre>"},{"location":"reference/itfit/fit_functions/generic_fitter/#itfit.fit_functions.generic_fitter.GenericFitterTool","title":"<code>GenericFitterTool</code>","text":"<p>         Bases: <code>ToolToggleBase</code></p> <p>Toggles Generic Fitter Tool.</p> Source code in <code>itfit/fit_functions/generic_fitter.py</code> <pre><code>class GenericFitterTool(ToolToggleBase):\n\"\"\"Toggles Generic Fitter Tool.\"\"\"\n\n    def __init__(self, *args, app: Fitter, data: DataSelection, **kwargs):\n\"\"\"Creates a GenericFitterTool.\n\n        Parameters:\n            app (Fitter):\n                Main application.\n            data (DataSelection):\n                Data selected.\n        \"\"\"\n        self.app = app\n        self.data = data\n        self.fitter: GenericFitter\n        super().__init__(*args, **kwargs)\n\n    def enable(self, *args):\n\"\"\"Triggered when GenericTool is enabled.\n        Uses BlitManager for faster rendering of DragObjects.\n        \"\"\"\n        self.app.blit_manager.enable()\n\n    def disable(self, *args):\n\"\"\"Triggered when GenericTool is disabled.\n        Removes DragObjects and disables BlitManager.\n        \"\"\"\n        self.fitter.delete()\n        self.app.blit_manager.disable()\n        self.app.figure.canvas.draw_idle()\n</code></pre>"},{"location":"reference/itfit/fit_functions/generic_fitter/#itfit.fit_functions.generic_fitter.GenericFitterTool.__init__","title":"<code>__init__(*args, app, data, **kwargs)</code>","text":"<p>Creates a GenericFitterTool.</p> <p>Parameters:</p> Name Type Description Default <code>app</code> <code>Fitter</code> <p>Main application.</p> required <code>data</code> <code>DataSelection</code> <p>Data selected.</p> required Source code in <code>itfit/fit_functions/generic_fitter.py</code> <pre><code>def __init__(self, *args, app: Fitter, data: DataSelection, **kwargs):\n\"\"\"Creates a GenericFitterTool.\n\n    Parameters:\n        app (Fitter):\n            Main application.\n        data (DataSelection):\n            Data selected.\n    \"\"\"\n    self.app = app\n    self.data = data\n    self.fitter: GenericFitter\n    super().__init__(*args, **kwargs)\n</code></pre>"},{"location":"reference/itfit/fit_functions/generic_fitter/#itfit.fit_functions.generic_fitter.GenericFitterTool.disable","title":"<code>disable(*args)</code>","text":"<p>Triggered when GenericTool is disabled. Removes DragObjects and disables BlitManager.</p> Source code in <code>itfit/fit_functions/generic_fitter.py</code> <pre><code>def disable(self, *args):\n\"\"\"Triggered when GenericTool is disabled.\n    Removes DragObjects and disables BlitManager.\n    \"\"\"\n    self.fitter.delete()\n    self.app.blit_manager.disable()\n    self.app.figure.canvas.draw_idle()\n</code></pre>"},{"location":"reference/itfit/fit_functions/generic_fitter/#itfit.fit_functions.generic_fitter.GenericFitterTool.enable","title":"<code>enable(*args)</code>","text":"<p>Triggered when GenericTool is enabled. Uses BlitManager for faster rendering of DragObjects.</p> Source code in <code>itfit/fit_functions/generic_fitter.py</code> <pre><code>def enable(self, *args):\n\"\"\"Triggered when GenericTool is enabled.\n    Uses BlitManager for faster rendering of DragObjects.\n    \"\"\"\n    self.app.blit_manager.enable()\n</code></pre>"},{"location":"reference/itfit/fit_functions/linear/","title":"Linear","text":""},{"location":"reference/itfit/fit_functions/linear/#itfit.fit_functions.linear.LineFitter","title":"<code>LineFitter</code>","text":"<p>         Bases: <code>GenericFitter</code></p> <p>Linear function fitter.</p> Source code in <code>itfit/fit_functions/linear.py</code> <pre><code>class LineFitter(GenericFitter):\n\"\"\"Linear function fitter.\"\"\"\n    name = 'linear'\n\n    def __init__(self, app, data: DataSelection):\n\"\"\"Linear fitter following function `f(x)=m*x + n`.\n\n        Parameters:\n            app (Fitter): \n                Main application.\n            data (DataSelection): \n                Data to fit.\n        \"\"\"\n        super().__init__(app, data)\n\n        ## Create DragPoints and DragLines needed\n\n        self.drag_points = [DragPoint(*self.ax.transAxes.transform((0.2,0.3)), None), \n                            DragPoint(*self.ax.transAxes.transform((0.8,0.7)), None)]\n        self.drag_points_managers = [DragPointManager(p, self.app.blit_manager) for p in self.drag_points]\n        self.fitter_drag_collection = DragLineManager(self.drag_points, self.app.blit_manager)\n\n        ## Connect Line to Points change events\n        self.drag_points_cids = [] # Connections ids for change events\n        for dp in self.drag_points_managers:\n            self.drag_points_cids.append(\n                dp.connect(self.fitter_drag_collection.update)\n            )\n\n        ## Add created DragPoints and DragLines to BlitManager's artists\n        self.app.blit_manager.artists.append(self.fitter_drag_collection)\n        for dpm in self.drag_points_managers:\n            self.app.blit_manager.artists.append(dpm)\n\n        self.fig.canvas.draw_idle()\n</code></pre>"},{"location":"reference/itfit/fit_functions/linear/#itfit.fit_functions.linear.LineFitter.__init__","title":"<code>__init__(app, data)</code>","text":"<p>Linear fitter following function <code>f(x)=m*x + n</code>.</p> <p>Parameters:</p> Name Type Description Default <code>app</code> <code>Fitter</code> <p>Main application.</p> required <code>data</code> <code>DataSelection</code> <p>Data to fit.</p> required Source code in <code>itfit/fit_functions/linear.py</code> <pre><code>def __init__(self, app, data: DataSelection):\n\"\"\"Linear fitter following function `f(x)=m*x + n`.\n\n    Parameters:\n        app (Fitter): \n            Main application.\n        data (DataSelection): \n            Data to fit.\n    \"\"\"\n    super().__init__(app, data)\n\n    ## Create DragPoints and DragLines needed\n\n    self.drag_points = [DragPoint(*self.ax.transAxes.transform((0.2,0.3)), None), \n                        DragPoint(*self.ax.transAxes.transform((0.8,0.7)), None)]\n    self.drag_points_managers = [DragPointManager(p, self.app.blit_manager) for p in self.drag_points]\n    self.fitter_drag_collection = DragLineManager(self.drag_points, self.app.blit_manager)\n\n    ## Connect Line to Points change events\n    self.drag_points_cids = [] # Connections ids for change events\n    for dp in self.drag_points_managers:\n        self.drag_points_cids.append(\n            dp.connect(self.fitter_drag_collection.update)\n        )\n\n    ## Add created DragPoints and DragLines to BlitManager's artists\n    self.app.blit_manager.artists.append(self.fitter_drag_collection)\n    for dpm in self.drag_points_managers:\n        self.app.blit_manager.artists.append(dpm)\n\n    self.fig.canvas.draw_idle()\n</code></pre>"},{"location":"reference/itfit/fit_functions/linear/#itfit.fit_functions.linear.LineTool","title":"<code>LineTool</code>","text":"<p>         Bases: <code>GenericFitterTool</code></p> <p>Toggles Line Tool.</p> Source code in <code>itfit/fit_functions/linear.py</code> <pre><code>class LineTool(GenericFitterTool):\n\"\"\"Toggles Line Tool.\"\"\"\n\n    # default_keymap = ''\n    description = 'Line me please'\n    default_toggled = False\n    radio_group = \"fitter\"\n\n    def enable(self, *args):\n\"\"\"Triggered when LineTool is enabled.\n        Uses BlitManager for faster rendering of DragObjects.\n        \"\"\"\n        super().enable()\n        self.fitter = LineFitter(self.app, self.data)\n\n    def disable(self, *args):\n\"\"\"Triggered when LineTool is disabled.\n        Removes DragObjects and disables BlitManager.\n        \"\"\"\n        super().disable()\n</code></pre>"},{"location":"reference/itfit/fit_functions/linear/#itfit.fit_functions.linear.LineTool.disable","title":"<code>disable(*args)</code>","text":"<p>Triggered when LineTool is disabled. Removes DragObjects and disables BlitManager.</p> Source code in <code>itfit/fit_functions/linear.py</code> <pre><code>def disable(self, *args):\n\"\"\"Triggered when LineTool is disabled.\n    Removes DragObjects and disables BlitManager.\n    \"\"\"\n    super().disable()\n</code></pre>"},{"location":"reference/itfit/fit_functions/linear/#itfit.fit_functions.linear.LineTool.enable","title":"<code>enable(*args)</code>","text":"<p>Triggered when LineTool is enabled. Uses BlitManager for faster rendering of DragObjects.</p> Source code in <code>itfit/fit_functions/linear.py</code> <pre><code>def enable(self, *args):\n\"\"\"Triggered when LineTool is enabled.\n    Uses BlitManager for faster rendering of DragObjects.\n    \"\"\"\n    super().enable()\n    self.fitter = LineFitter(self.app, self.data)\n</code></pre>"},{"location":"reference/itfit/fit_functions/lorentzian/","title":"Lorentzian","text":""},{"location":"reference/itfit/fit_functions/lorentzian/#itfit.fit_functions.lorentzian.LorentzianFitter","title":"<code>LorentzianFitter</code>","text":"<p>         Bases: <code>GenericFitter</code></p> <p>Lorentzian function fitter.</p> Source code in <code>itfit/fit_functions/lorentzian.py</code> <pre><code>class LorentzianFitter(GenericFitter):\n\"\"\"Lorentzian function fitter.\"\"\"\n    name = 'lorentzian'\n\n    def __init__(self,app,data: DataSelection):\n\"\"\" Lorentzian fitter following function `f(x) = A/pi*(FWHM/2)/((x-x0)^2+(FWHM/2)^2)`\n\n        Parameters:\n            app (Fitter):\n                Main application.\n            data (DataSelection):\n                Data to fit.\n        \"\"\"\n\n        super().__init__(app,data)\n\n        ## Create DragPoints and DragLines needed\n\n        self.drag_points = [DragPoint(*self.ax.transAxes.transform((0.5,0.7)), None),\n                            DragPoint(*self.ax.transAxes.transform((0.7,0.3)), None)]\n        self.drag_points_managers = [DragPointManager(p,self.app.blit_manager) for p in self.drag_points]\n        self.fitter_drag_collection = DragLorentzianManager(self.drag_points, self.app.blit_manager)\n\n        ##Connect Lorentzian to Points change events\n        self.drag_points_cids = [] #Connections ids for change events\n        for dp in self.drag_points_managers:\n            self.drag_points_cids.append(\n                dp.connect(self.fitter_drag_collection.update)\n            )\n        self.drag_points_managers[1].add_restriction(self.res_fwhm)\n\n        ## Add created DragPoints and DragLines to BlitManager's artists\n        self.app.blit_manager.artists.append(self.fitter_drag_collection)\n        for dpm in self.drag_points_managers:\n            self.app.blit_manager.artists.append(dpm)\n\n        self.fig.canvas.draw_idle()\n\n    def res_fwhm(self, x, y):\n        return x, self.drag_points_managers[0].get_xy(*self.drag_points[0].patch.get_center())[1]/2\n</code></pre>"},{"location":"reference/itfit/fit_functions/lorentzian/#itfit.fit_functions.lorentzian.LorentzianFitter.__init__","title":"<code>__init__(app, data)</code>","text":"<p>Lorentzian fitter following function <code>f(x) = A/pi*(FWHM/2)/((x-x0)^2+(FWHM/2)^2)</code></p> <p>Parameters:</p> Name Type Description Default <code>app</code> <code>Fitter</code> <p>Main application.</p> required <code>data</code> <code>DataSelection</code> <p>Data to fit.</p> required Source code in <code>itfit/fit_functions/lorentzian.py</code> <pre><code>def __init__(self,app,data: DataSelection):\n\"\"\" Lorentzian fitter following function `f(x) = A/pi*(FWHM/2)/((x-x0)^2+(FWHM/2)^2)`\n\n    Parameters:\n        app (Fitter):\n            Main application.\n        data (DataSelection):\n            Data to fit.\n    \"\"\"\n\n    super().__init__(app,data)\n\n    ## Create DragPoints and DragLines needed\n\n    self.drag_points = [DragPoint(*self.ax.transAxes.transform((0.5,0.7)), None),\n                        DragPoint(*self.ax.transAxes.transform((0.7,0.3)), None)]\n    self.drag_points_managers = [DragPointManager(p,self.app.blit_manager) for p in self.drag_points]\n    self.fitter_drag_collection = DragLorentzianManager(self.drag_points, self.app.blit_manager)\n\n    ##Connect Lorentzian to Points change events\n    self.drag_points_cids = [] #Connections ids for change events\n    for dp in self.drag_points_managers:\n        self.drag_points_cids.append(\n            dp.connect(self.fitter_drag_collection.update)\n        )\n    self.drag_points_managers[1].add_restriction(self.res_fwhm)\n\n    ## Add created DragPoints and DragLines to BlitManager's artists\n    self.app.blit_manager.artists.append(self.fitter_drag_collection)\n    for dpm in self.drag_points_managers:\n        self.app.blit_manager.artists.append(dpm)\n\n    self.fig.canvas.draw_idle()\n</code></pre>"},{"location":"reference/itfit/fit_functions/lorentzian/#itfit.fit_functions.lorentzian.LorentzianTool","title":"<code>LorentzianTool</code>","text":"<p>         Bases: <code>GenericFitterTool</code></p> <p>Toggles Lorentzian Tool.</p> Source code in <code>itfit/fit_functions/lorentzian.py</code> <pre><code>class LorentzianTool(GenericFitterTool):\n\"\"\"Toggles Lorentzian Tool.\"\"\"\n\n    # default_keymap = ''\n    description = 'Lorentz me please'\n    default_toggled = False \n    radio_group = \"fitter\"\n\n    def enable(self,*args):\n\"\"\"Triggered when LorentzianTool is enabled,\n        Uses BlitManager for faster rendering of DragObjects.\n        \"\"\"\n        super().enable()\n        self.fitter = LorentzianFitter(self.app,self.data)\n\n    def disable(self,*args):\n\"\"\"Triggered when LorentzianTool is disabled.\n        Removes DragObjects and disables BlitManager.\n        \"\"\"\n        super().disable()\n</code></pre>"},{"location":"reference/itfit/fit_functions/lorentzian/#itfit.fit_functions.lorentzian.LorentzianTool.disable","title":"<code>disable(*args)</code>","text":"<p>Triggered when LorentzianTool is disabled. Removes DragObjects and disables BlitManager.</p> Source code in <code>itfit/fit_functions/lorentzian.py</code> <pre><code>def disable(self,*args):\n\"\"\"Triggered when LorentzianTool is disabled.\n    Removes DragObjects and disables BlitManager.\n    \"\"\"\n    super().disable()\n</code></pre>"},{"location":"reference/itfit/fit_functions/lorentzian/#itfit.fit_functions.lorentzian.LorentzianTool.enable","title":"<code>enable(*args)</code>","text":"<p>Triggered when LorentzianTool is enabled, Uses BlitManager for faster rendering of DragObjects.</p> Source code in <code>itfit/fit_functions/lorentzian.py</code> <pre><code>def enable(self,*args):\n\"\"\"Triggered when LorentzianTool is enabled,\n    Uses BlitManager for faster rendering of DragObjects.\n    \"\"\"\n    super().enable()\n    self.fitter = LorentzianFitter(self.app,self.data)\n</code></pre>"},{"location":"reference/itfit/fit_functions/quadratic/","title":"Quadratic","text":""},{"location":"reference/itfit/fit_functions/quadratic/#itfit.fit_functions.quadratic.QuadraticFitter","title":"<code>QuadraticFitter</code>","text":"<p>         Bases: <code>GenericFitter</code></p> <p>Quadratic function fitter.</p> Source code in <code>itfit/fit_functions/quadratic.py</code> <pre><code>class QuadraticFitter(GenericFitter):\n\"\"\"Quadratic function fitter.\"\"\"\n    name = 'quadratic'\n\n    def __init__(self, app, data: DataSelection):\n\"\"\"Quadratic fitter following function `f(x)=a*x^2 + b*x + c`\n\n        Parameters:\n            app (Fitter): \n                Main application.\n            data (DataSelection): \n                Data to fit.\n        \"\"\"\n        super().__init__(app, data)\n\n        ## Create DragPoints and DragLines needed\n\n        self.drag_points = [DragPoint(*self.ax.transAxes.transform((0.5,0.2)), None), \n                            DragPoint(*self.ax.transAxes.transform((0.7,0.5)), None)]\n        self.drag_points_managers = [DragPointManager(p, self.app.blit_manager) for p in self.drag_points]\n        self.fitter_drag_collection = DragQuadraticManager(self.drag_points, self.app.blit_manager)\n\n        ## Connect Quadratic to Points change events\n        self.drag_points_cids = [] # Connections ids for change events\n        for dp in self.drag_points_managers:\n            self.drag_points_cids.append(\n                dp.connect(self.fitter_drag_collection.update)\n            )\n\n        ## Add created DragPoints and DragLines to BlitManager's artists\n        self.app.blit_manager.artists.append(self.fitter_drag_collection)\n        for dpm in self.drag_points_managers:\n            self.app.blit_manager.artists.append(dpm)\n\n        self.fig.canvas.draw_idle()\n</code></pre>"},{"location":"reference/itfit/fit_functions/quadratic/#itfit.fit_functions.quadratic.QuadraticFitter.__init__","title":"<code>__init__(app, data)</code>","text":"<p>Quadratic fitter following function <code>f(x)=a*x^2 + b*x + c</code></p> <p>Parameters:</p> Name Type Description Default <code>app</code> <code>Fitter</code> <p>Main application.</p> required <code>data</code> <code>DataSelection</code> <p>Data to fit.</p> required Source code in <code>itfit/fit_functions/quadratic.py</code> <pre><code>def __init__(self, app, data: DataSelection):\n\"\"\"Quadratic fitter following function `f(x)=a*x^2 + b*x + c`\n\n    Parameters:\n        app (Fitter): \n            Main application.\n        data (DataSelection): \n            Data to fit.\n    \"\"\"\n    super().__init__(app, data)\n\n    ## Create DragPoints and DragLines needed\n\n    self.drag_points = [DragPoint(*self.ax.transAxes.transform((0.5,0.2)), None), \n                        DragPoint(*self.ax.transAxes.transform((0.7,0.5)), None)]\n    self.drag_points_managers = [DragPointManager(p, self.app.blit_manager) for p in self.drag_points]\n    self.fitter_drag_collection = DragQuadraticManager(self.drag_points, self.app.blit_manager)\n\n    ## Connect Quadratic to Points change events\n    self.drag_points_cids = [] # Connections ids for change events\n    for dp in self.drag_points_managers:\n        self.drag_points_cids.append(\n            dp.connect(self.fitter_drag_collection.update)\n        )\n\n    ## Add created DragPoints and DragLines to BlitManager's artists\n    self.app.blit_manager.artists.append(self.fitter_drag_collection)\n    for dpm in self.drag_points_managers:\n        self.app.blit_manager.artists.append(dpm)\n\n    self.fig.canvas.draw_idle()\n</code></pre>"},{"location":"reference/itfit/fit_functions/quadratic/#itfit.fit_functions.quadratic.QuadraticTool","title":"<code>QuadraticTool</code>","text":"<p>         Bases: <code>GenericFitterTool</code></p> <p>Toggles Quadratic Tool.</p> Source code in <code>itfit/fit_functions/quadratic.py</code> <pre><code>class QuadraticTool(GenericFitterTool):\n\"\"\"Toggles Quadratic Tool.\"\"\"\n\n    # default_keymap = ''\n    description = 'Quadratic me please'\n    default_toggled = False\n    radio_group = \"fitter\"\n\n    def enable(self, *args):\n\"\"\"Triggered when QuadraticTool is enabled.\n        Uses BlitManager for faster rendering of DragObjects.\n        \"\"\"\n        super().enable()\n        self.fitter = QuadraticFitter(self.app, self.data)\n\n    def disable(self, *args):\n\"\"\"Triggered when QuadraticTool is disabled.\n        Removes DragObjects and disables BlitManager.\n        \"\"\"\n        super().disable()\n</code></pre>"},{"location":"reference/itfit/fit_functions/quadratic/#itfit.fit_functions.quadratic.QuadraticTool.disable","title":"<code>disable(*args)</code>","text":"<p>Triggered when QuadraticTool is disabled. Removes DragObjects and disables BlitManager.</p> Source code in <code>itfit/fit_functions/quadratic.py</code> <pre><code>def disable(self, *args):\n\"\"\"Triggered when QuadraticTool is disabled.\n    Removes DragObjects and disables BlitManager.\n    \"\"\"\n    super().disable()\n</code></pre>"},{"location":"reference/itfit/fit_functions/quadratic/#itfit.fit_functions.quadratic.QuadraticTool.enable","title":"<code>enable(*args)</code>","text":"<p>Triggered when QuadraticTool is enabled. Uses BlitManager for faster rendering of DragObjects.</p> Source code in <code>itfit/fit_functions/quadratic.py</code> <pre><code>def enable(self, *args):\n\"\"\"Triggered when QuadraticTool is enabled.\n    Uses BlitManager for faster rendering of DragObjects.\n    \"\"\"\n    super().enable()\n    self.fitter = QuadraticFitter(self.app, self.data)\n</code></pre>"},{"location":"reference/itfit/plot/","title":"Index","text":"<p>TODO</p>"},{"location":"reference/itfit/plot/builder/","title":"Builder","text":""},{"location":"reference/itfit/plot/builder/#itfit.plot.builder.PlotBuilder","title":"<code>PlotBuilder</code>","text":"<p>PlotBuilder is a class whose intent is to uase the user in plot customization.  Using PlotBuilder with jupyther/notebook is strongly recomended as changes are interactive and figures are preserved. </p> Source code in <code>itfit/plot/builder.py</code> <pre><code>class PlotBuilder:\n\"\"\"PlotBuilder is a class whose intent is to uase the user in plot customization. \n    Using PlotBuilder with jupyther/notebook is strongly recomended as changes are interactive and figures are preserved.\n    ![image](example1.PNG)\n    \"\"\"\n    fig: Figure\n    ax: Axes\n    def __init__(self, app: Fitter, fit, **kargs):\n\"\"\"_summary_\n\n        Args:\n            app (itfit.Fitter): Main application.\n            fit (itfit.utils.FitResultContainer): FitResultContainer of the fit.\n        \"\"\"\n        self.app = app\n        self.fit = fit\n\n    def plot_fit(self, fmt='--', color='black', label='', **kargs):\n\"\"\"Plots the fit line into the figure.\n\n        Args:\n            fmt (str, optional): Fit line format. Defaults to '--'.\n            color (str, optional): Color for the line. Defaults to 'black'.\n            label (str, optional): Label assigned to the artists. Defaults to ''.\n\n        Returns:\n            (itfit.plot.builder.PlotBuilder): Returns itself to continue building the plot.\n        \"\"\"\n        self._start_()\n        self._line, = self.ax.plot(*(self.fit.get_fit_data().T), fmt, color=color, label=label, **kargs)\n        return self\n\n    def with_fit(self, fmt='--', color='black', label='', **kargs):\n\"\"\"Same as itfit.plot.builder.PlotBuilder.plot_fit. Plots the fit line into the figure.\n\n        Args:\n            fmt (str, optional): Fit line format. Defaults to '--'.\n            color (str, optional): Color for the line. Defaults to 'black'.\n            label (str, optional): Label assigned to the artists. Defaults to ''.\n\n        Returns:\n            (itfit.plot.builder.PlotBuilder): Returns itself to continue building the plot.\n        \"\"\"\n        return self.plot_fit(fmt=fmt, color=color, label=label, **kargs)\n\n    def plot_data(self, fmt='.', color=None, label='', **kargs):\n\"\"\"Plots the data fitted into the figure.\n\n        Args:\n            fmt (str, optional): Data line format. Defaults to '.'.\n            color (str, optional): Color for the line. Defaults to None.\n            label (str, optional): Label assigned to the artists. Defaults to ''.\n\n        Returns:\n            (itfit.plot.builder.PlotBuilder): Returns itself to continue building the plot.\n        \"\"\"\n        self._start_()\n        self._line_data, = self.ax.plot( *(self.fit.get_data().T), fmt, color=color, label=label, **kargs)\n        return self\n\n    def with_data(self, fmt='.', color=None, label='', **kargs):\n\"\"\"Same as itfit.plot.builder.PlotBuilder.plot_data. Plots the data fitted into the figure.\n\n        Args:\n            fmt (str, optional): Data line format. Defaults to '.'.\n            color (str, optional): Color for the line. Defaults to None.\n            label (str, optional): Label assigned to the artists. Defaults to ''.\n\n        Returns:\n            (itfit.plot.builder.PlotBuilder): Returns itself to continue building the plot.\n        \"\"\"\n        return self.plot_data(fmt=fmt, color=color, label=label, **kargs)\n\n    def labels(self):\n\"\"\"Starts labels builder. After calling it xlabel and ylabel can be accessed.\n\n        Returns:\n            (itfit.plot.labels.LabelBuilder): label builder.\n        \"\"\"\n        return LabelBuilder(self)\n\n    def title(self, title: str):\n\"\"\"Shortcut to `.labels().start_title(title).end_title().end_labels()`.\n\n        Args:\n            title (str): Title string.\n\n        Returns:\n            (itfit.plot.builder.PlotBuilder): Returns itself to continue building the plot.\n        \"\"\"\n        return self.labels().start_title(title).end_title().end_labels()\n\n    def xlabel(self, xlabel):\n\"\"\"Shortcut to `.labels().start_x_label(xlabel).end_xlabel().end_labels()`.\n\n        Args:\n            xlabel (str): x label string.\n\n        Returns:\n            (itfit.plot.builder.PlotBuilder): Returns itself to continue building the plot.\n        \"\"\"\n        return self.labels().start_x_label(xlabel).end_xlabel().end_labels()\n\n    def ylabel(self, ylabel):\n\"\"\"Shortcut to `.labels().start_y_label(ylabel).end_ylabel().end_labels()`.\n\n        Args:\n            ylabel (str): y label string.\n\n        Returns:\n            (itfit.plot.builder.PlotBuilder): Returns itself to continue building the plot.\n        \"\"\"\n        return self.labels().start_y_label(ylabel).end_ylabel().end_labels()\n\n    def legend(self, *args, **kargs):\n\"\"\"Toggles the legend in the plot.\n\n        Returns:\n            (itfit.plot.builder.PlotBuilder): Returns itself to continue building the plot.\n        \"\"\"\n        self.ax.legend(*args, **kargs)\n        return self\n\n    def grid(self, *args, **kwargs):\n\"\"\"Toggles the grid in the plot.\n\n        Returns:\n            (itfit.plot.builder.PlotBuilder): Returns itself to continue building the plot.\n        \"\"\"\n        self.ax.grid(*args, **kwargs)\n        return self\n\n    def set_xlim(self, left: float, right: float, **kargs):\n\"\"\"Sets the left and right plot limits on x axis.\n\n        Args:\n            left (float): left limit.\n            right (float): right limit.\n\n        Returns:\n            (itfit.plot.builder.PlotBuilder): Returns itself to continue building the plot.\n        \"\"\"\n        self.ax.set_xlim(left=left, right=right, **kargs)\n        return self\n\n    def set_ylim(self, bottom: float, top: float, **kargs):\n\"\"\"Sets the bottom and top plot limits on y axis.\n\n        Args:\n            bottom (float): bottom limit.\n            top (float): top limit.\n\n        Returns:\n            (itfit.plot.builder.PlotBuilder): Returns itself to continue building the plot.\n        \"\"\"\n        self.ax.set_ylim(bottom=bottom, top=top, **kargs)\n        return self\n\n    def tight_layout(self, **kargs):\n\"\"\"Adjust the padding between and around subplots.\n\n        Returns:\n            (itfit.plot.builder.PlotBuilder): Returns itself to continue building the plot.\n        \"\"\"\n        self.fig.tight_layout(**kargs)\n        return self\n\n    def set_size(self, size, unit='cm'):\n\"\"\"Sets the figure size, be default in centimeters.\n\n        Args:\n            size (float): left limit.\n            unit (float): right limit. Default='cm'.\n\n        Returns:\n            (itfit.plot.builder.PlotBuilder): Returns itself to continue building the plot.\n        \"\"\"\n        factor = 1/2.54\n        if unit == 'inch':\n            factor = 1\n        if unit == 'px':\n            factor = 1/rcParams['figure.dpi']\n        self.fig.set_size_inches(size[0]*factor, size[1]*factor, forward=True)\n        return self\n\n    def spines(self):\n\"\"\"Starts spines builder.\n\n        Returns:\n            (itfit.plot.spines.SpineBuilder): spine builder.\n        \"\"\"\n        return SpineBuilder(self)\n\n    def style(self, style):\n\"\"\"Sets the style. Must be executed befor `start`.\n\n        Args:\n            style (str): Style to use.\n\n        Returns:\n            (itfit.plot.builder.PlotBuilder): Returns itself to continue building the plot.\n        \"\"\"\n        mpl_style.use(style)\n\n        self._start_(warn=True)\n        return self\n\n    def _start_(self, warn=False):\n\"\"\"Creates the figure and the axes.\n\n        Returns:\n            (itfit.plot.builder.PlotBuilder): Returns itself to start building the plot.\n        \"\"\"\n        if hasattr(self, \"fig\") and hasattr(self, \"ax\"):\n            if warn:\n                print(\"Warning: style changes will not affect an existent figure. Use `style` before ploting anything to the figure.\")\n            return self\n        self.fig = plt.figure()\n        self.ax = self.fig.gca()\n\n    def save_fig(self, filename, transparent=False, **kargs):\n\"\"\"Saves the figure with the given filename\n\n        Returns:\n            (itfit.plot.builder.PlotBuilder): Returns itself to continue building the plot.\n        \"\"\"\n        self.fig.savefig(filename, transparent=transparent, **kargs)\n        return self\n\n    def show_inline(self):\n        return self.fig\n</code></pre>"},{"location":"reference/itfit/plot/builder/#itfit.plot.builder.PlotBuilder.__init__","title":"<code>__init__(app, fit, **kargs)</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>app</code> <code>itfit.Fitter</code> <p>Main application.</p> required <code>fit</code> <code>itfit.utils.FitResultContainer</code> <p>FitResultContainer of the fit.</p> required Source code in <code>itfit/plot/builder.py</code> <pre><code>def __init__(self, app: Fitter, fit, **kargs):\n\"\"\"_summary_\n\n    Args:\n        app (itfit.Fitter): Main application.\n        fit (itfit.utils.FitResultContainer): FitResultContainer of the fit.\n    \"\"\"\n    self.app = app\n    self.fit = fit\n</code></pre>"},{"location":"reference/itfit/plot/builder/#itfit.plot.builder.PlotBuilder.grid","title":"<code>grid(*args, **kwargs)</code>","text":"<p>Toggles the grid in the plot.</p> <p>Returns:</p> Type Description <code>itfit.plot.builder.PlotBuilder</code> <p>Returns itself to continue building the plot.</p> Source code in <code>itfit/plot/builder.py</code> <pre><code>def grid(self, *args, **kwargs):\n\"\"\"Toggles the grid in the plot.\n\n    Returns:\n        (itfit.plot.builder.PlotBuilder): Returns itself to continue building the plot.\n    \"\"\"\n    self.ax.grid(*args, **kwargs)\n    return self\n</code></pre>"},{"location":"reference/itfit/plot/builder/#itfit.plot.builder.PlotBuilder.labels","title":"<code>labels()</code>","text":"<p>Starts labels builder. After calling it xlabel and ylabel can be accessed.</p> <p>Returns:</p> Type Description <code>itfit.plot.labels.LabelBuilder</code> <p>label builder.</p> Source code in <code>itfit/plot/builder.py</code> <pre><code>def labels(self):\n\"\"\"Starts labels builder. After calling it xlabel and ylabel can be accessed.\n\n    Returns:\n        (itfit.plot.labels.LabelBuilder): label builder.\n    \"\"\"\n    return LabelBuilder(self)\n</code></pre>"},{"location":"reference/itfit/plot/builder/#itfit.plot.builder.PlotBuilder.legend","title":"<code>legend(*args, **kargs)</code>","text":"<p>Toggles the legend in the plot.</p> <p>Returns:</p> Type Description <code>itfit.plot.builder.PlotBuilder</code> <p>Returns itself to continue building the plot.</p> Source code in <code>itfit/plot/builder.py</code> <pre><code>def legend(self, *args, **kargs):\n\"\"\"Toggles the legend in the plot.\n\n    Returns:\n        (itfit.plot.builder.PlotBuilder): Returns itself to continue building the plot.\n    \"\"\"\n    self.ax.legend(*args, **kargs)\n    return self\n</code></pre>"},{"location":"reference/itfit/plot/builder/#itfit.plot.builder.PlotBuilder.plot_data","title":"<code>plot_data(fmt='.', color=None, label='', **kargs)</code>","text":"<p>Plots the data fitted into the figure.</p> <p>Parameters:</p> Name Type Description Default <code>fmt</code> <code>str</code> <p>Data line format. Defaults to '.'.</p> <code>'.'</code> <code>color</code> <code>str</code> <p>Color for the line. Defaults to None.</p> <code>None</code> <code>label</code> <code>str</code> <p>Label assigned to the artists. Defaults to ''.</p> <code>''</code> <p>Returns:</p> Type Description <code>itfit.plot.builder.PlotBuilder</code> <p>Returns itself to continue building the plot.</p> Source code in <code>itfit/plot/builder.py</code> <pre><code>def plot_data(self, fmt='.', color=None, label='', **kargs):\n\"\"\"Plots the data fitted into the figure.\n\n    Args:\n        fmt (str, optional): Data line format. Defaults to '.'.\n        color (str, optional): Color for the line. Defaults to None.\n        label (str, optional): Label assigned to the artists. Defaults to ''.\n\n    Returns:\n        (itfit.plot.builder.PlotBuilder): Returns itself to continue building the plot.\n    \"\"\"\n    self._start_()\n    self._line_data, = self.ax.plot( *(self.fit.get_data().T), fmt, color=color, label=label, **kargs)\n    return self\n</code></pre>"},{"location":"reference/itfit/plot/builder/#itfit.plot.builder.PlotBuilder.plot_fit","title":"<code>plot_fit(fmt='--', color='black', label='', **kargs)</code>","text":"<p>Plots the fit line into the figure.</p> <p>Parameters:</p> Name Type Description Default <code>fmt</code> <code>str</code> <p>Fit line format. Defaults to '--'.</p> <code>'--'</code> <code>color</code> <code>str</code> <p>Color for the line. Defaults to 'black'.</p> <code>'black'</code> <code>label</code> <code>str</code> <p>Label assigned to the artists. Defaults to ''.</p> <code>''</code> <p>Returns:</p> Type Description <code>itfit.plot.builder.PlotBuilder</code> <p>Returns itself to continue building the plot.</p> Source code in <code>itfit/plot/builder.py</code> <pre><code>def plot_fit(self, fmt='--', color='black', label='', **kargs):\n\"\"\"Plots the fit line into the figure.\n\n    Args:\n        fmt (str, optional): Fit line format. Defaults to '--'.\n        color (str, optional): Color for the line. Defaults to 'black'.\n        label (str, optional): Label assigned to the artists. Defaults to ''.\n\n    Returns:\n        (itfit.plot.builder.PlotBuilder): Returns itself to continue building the plot.\n    \"\"\"\n    self._start_()\n    self._line, = self.ax.plot(*(self.fit.get_fit_data().T), fmt, color=color, label=label, **kargs)\n    return self\n</code></pre>"},{"location":"reference/itfit/plot/builder/#itfit.plot.builder.PlotBuilder.save_fig","title":"<code>save_fig(filename, transparent=False, **kargs)</code>","text":"<p>Saves the figure with the given filename</p> <p>Returns:</p> Type Description <code>itfit.plot.builder.PlotBuilder</code> <p>Returns itself to continue building the plot.</p> Source code in <code>itfit/plot/builder.py</code> <pre><code>def save_fig(self, filename, transparent=False, **kargs):\n\"\"\"Saves the figure with the given filename\n\n    Returns:\n        (itfit.plot.builder.PlotBuilder): Returns itself to continue building the plot.\n    \"\"\"\n    self.fig.savefig(filename, transparent=transparent, **kargs)\n    return self\n</code></pre>"},{"location":"reference/itfit/plot/builder/#itfit.plot.builder.PlotBuilder.set_size","title":"<code>set_size(size, unit='cm')</code>","text":"<p>Sets the figure size, be default in centimeters.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>float</code> <p>left limit.</p> required <code>unit</code> <code>float</code> <p>right limit. Default='cm'.</p> <code>'cm'</code> <p>Returns:</p> Type Description <code>itfit.plot.builder.PlotBuilder</code> <p>Returns itself to continue building the plot.</p> Source code in <code>itfit/plot/builder.py</code> <pre><code>def set_size(self, size, unit='cm'):\n\"\"\"Sets the figure size, be default in centimeters.\n\n    Args:\n        size (float): left limit.\n        unit (float): right limit. Default='cm'.\n\n    Returns:\n        (itfit.plot.builder.PlotBuilder): Returns itself to continue building the plot.\n    \"\"\"\n    factor = 1/2.54\n    if unit == 'inch':\n        factor = 1\n    if unit == 'px':\n        factor = 1/rcParams['figure.dpi']\n    self.fig.set_size_inches(size[0]*factor, size[1]*factor, forward=True)\n    return self\n</code></pre>"},{"location":"reference/itfit/plot/builder/#itfit.plot.builder.PlotBuilder.set_xlim","title":"<code>set_xlim(left, right, **kargs)</code>","text":"<p>Sets the left and right plot limits on x axis.</p> <p>Parameters:</p> Name Type Description Default <code>left</code> <code>float</code> <p>left limit.</p> required <code>right</code> <code>float</code> <p>right limit.</p> required <p>Returns:</p> Type Description <code>itfit.plot.builder.PlotBuilder</code> <p>Returns itself to continue building the plot.</p> Source code in <code>itfit/plot/builder.py</code> <pre><code>def set_xlim(self, left: float, right: float, **kargs):\n\"\"\"Sets the left and right plot limits on x axis.\n\n    Args:\n        left (float): left limit.\n        right (float): right limit.\n\n    Returns:\n        (itfit.plot.builder.PlotBuilder): Returns itself to continue building the plot.\n    \"\"\"\n    self.ax.set_xlim(left=left, right=right, **kargs)\n    return self\n</code></pre>"},{"location":"reference/itfit/plot/builder/#itfit.plot.builder.PlotBuilder.set_ylim","title":"<code>set_ylim(bottom, top, **kargs)</code>","text":"<p>Sets the bottom and top plot limits on y axis.</p> <p>Parameters:</p> Name Type Description Default <code>bottom</code> <code>float</code> <p>bottom limit.</p> required <code>top</code> <code>float</code> <p>top limit.</p> required <p>Returns:</p> Type Description <code>itfit.plot.builder.PlotBuilder</code> <p>Returns itself to continue building the plot.</p> Source code in <code>itfit/plot/builder.py</code> <pre><code>def set_ylim(self, bottom: float, top: float, **kargs):\n\"\"\"Sets the bottom and top plot limits on y axis.\n\n    Args:\n        bottom (float): bottom limit.\n        top (float): top limit.\n\n    Returns:\n        (itfit.plot.builder.PlotBuilder): Returns itself to continue building the plot.\n    \"\"\"\n    self.ax.set_ylim(bottom=bottom, top=top, **kargs)\n    return self\n</code></pre>"},{"location":"reference/itfit/plot/builder/#itfit.plot.builder.PlotBuilder.spines","title":"<code>spines()</code>","text":"<p>Starts spines builder.</p> <p>Returns:</p> Type Description <code>itfit.plot.spines.SpineBuilder</code> <p>spine builder.</p> Source code in <code>itfit/plot/builder.py</code> <pre><code>def spines(self):\n\"\"\"Starts spines builder.\n\n    Returns:\n        (itfit.plot.spines.SpineBuilder): spine builder.\n    \"\"\"\n    return SpineBuilder(self)\n</code></pre>"},{"location":"reference/itfit/plot/builder/#itfit.plot.builder.PlotBuilder.style","title":"<code>style(style)</code>","text":"<p>Sets the style. Must be executed befor <code>start</code>.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>str</code> <p>Style to use.</p> required <p>Returns:</p> Type Description <code>itfit.plot.builder.PlotBuilder</code> <p>Returns itself to continue building the plot.</p> Source code in <code>itfit/plot/builder.py</code> <pre><code>def style(self, style):\n\"\"\"Sets the style. Must be executed befor `start`.\n\n    Args:\n        style (str): Style to use.\n\n    Returns:\n        (itfit.plot.builder.PlotBuilder): Returns itself to continue building the plot.\n    \"\"\"\n    mpl_style.use(style)\n\n    self._start_(warn=True)\n    return self\n</code></pre>"},{"location":"reference/itfit/plot/builder/#itfit.plot.builder.PlotBuilder.tight_layout","title":"<code>tight_layout(**kargs)</code>","text":"<p>Adjust the padding between and around subplots.</p> <p>Returns:</p> Type Description <code>itfit.plot.builder.PlotBuilder</code> <p>Returns itself to continue building the plot.</p> Source code in <code>itfit/plot/builder.py</code> <pre><code>def tight_layout(self, **kargs):\n\"\"\"Adjust the padding between and around subplots.\n\n    Returns:\n        (itfit.plot.builder.PlotBuilder): Returns itself to continue building the plot.\n    \"\"\"\n    self.fig.tight_layout(**kargs)\n    return self\n</code></pre>"},{"location":"reference/itfit/plot/builder/#itfit.plot.builder.PlotBuilder.title","title":"<code>title(title)</code>","text":"<p>Shortcut to <code>.labels().start_title(title).end_title().end_labels()</code>.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>Title string.</p> required <p>Returns:</p> Type Description <code>itfit.plot.builder.PlotBuilder</code> <p>Returns itself to continue building the plot.</p> Source code in <code>itfit/plot/builder.py</code> <pre><code>def title(self, title: str):\n\"\"\"Shortcut to `.labels().start_title(title).end_title().end_labels()`.\n\n    Args:\n        title (str): Title string.\n\n    Returns:\n        (itfit.plot.builder.PlotBuilder): Returns itself to continue building the plot.\n    \"\"\"\n    return self.labels().start_title(title).end_title().end_labels()\n</code></pre>"},{"location":"reference/itfit/plot/builder/#itfit.plot.builder.PlotBuilder.with_data","title":"<code>with_data(fmt='.', color=None, label='', **kargs)</code>","text":"<p>Same as itfit.plot.builder.PlotBuilder.plot_data. Plots the data fitted into the figure.</p> <p>Parameters:</p> Name Type Description Default <code>fmt</code> <code>str</code> <p>Data line format. Defaults to '.'.</p> <code>'.'</code> <code>color</code> <code>str</code> <p>Color for the line. Defaults to None.</p> <code>None</code> <code>label</code> <code>str</code> <p>Label assigned to the artists. Defaults to ''.</p> <code>''</code> <p>Returns:</p> Type Description <code>itfit.plot.builder.PlotBuilder</code> <p>Returns itself to continue building the plot.</p> Source code in <code>itfit/plot/builder.py</code> <pre><code>def with_data(self, fmt='.', color=None, label='', **kargs):\n\"\"\"Same as itfit.plot.builder.PlotBuilder.plot_data. Plots the data fitted into the figure.\n\n    Args:\n        fmt (str, optional): Data line format. Defaults to '.'.\n        color (str, optional): Color for the line. Defaults to None.\n        label (str, optional): Label assigned to the artists. Defaults to ''.\n\n    Returns:\n        (itfit.plot.builder.PlotBuilder): Returns itself to continue building the plot.\n    \"\"\"\n    return self.plot_data(fmt=fmt, color=color, label=label, **kargs)\n</code></pre>"},{"location":"reference/itfit/plot/builder/#itfit.plot.builder.PlotBuilder.with_fit","title":"<code>with_fit(fmt='--', color='black', label='', **kargs)</code>","text":"<p>Same as itfit.plot.builder.PlotBuilder.plot_fit. Plots the fit line into the figure.</p> <p>Parameters:</p> Name Type Description Default <code>fmt</code> <code>str</code> <p>Fit line format. Defaults to '--'.</p> <code>'--'</code> <code>color</code> <code>str</code> <p>Color for the line. Defaults to 'black'.</p> <code>'black'</code> <code>label</code> <code>str</code> <p>Label assigned to the artists. Defaults to ''.</p> <code>''</code> <p>Returns:</p> Type Description <code>itfit.plot.builder.PlotBuilder</code> <p>Returns itself to continue building the plot.</p> Source code in <code>itfit/plot/builder.py</code> <pre><code>def with_fit(self, fmt='--', color='black', label='', **kargs):\n\"\"\"Same as itfit.plot.builder.PlotBuilder.plot_fit. Plots the fit line into the figure.\n\n    Args:\n        fmt (str, optional): Fit line format. Defaults to '--'.\n        color (str, optional): Color for the line. Defaults to 'black'.\n        label (str, optional): Label assigned to the artists. Defaults to ''.\n\n    Returns:\n        (itfit.plot.builder.PlotBuilder): Returns itself to continue building the plot.\n    \"\"\"\n    return self.plot_fit(fmt=fmt, color=color, label=label, **kargs)\n</code></pre>"},{"location":"reference/itfit/plot/builder/#itfit.plot.builder.PlotBuilder.xlabel","title":"<code>xlabel(xlabel)</code>","text":"<p>Shortcut to <code>.labels().start_x_label(xlabel).end_xlabel().end_labels()</code>.</p> <p>Parameters:</p> Name Type Description Default <code>xlabel</code> <code>str</code> <p>x label string.</p> required <p>Returns:</p> Type Description <code>itfit.plot.builder.PlotBuilder</code> <p>Returns itself to continue building the plot.</p> Source code in <code>itfit/plot/builder.py</code> <pre><code>def xlabel(self, xlabel):\n\"\"\"Shortcut to `.labels().start_x_label(xlabel).end_xlabel().end_labels()`.\n\n    Args:\n        xlabel (str): x label string.\n\n    Returns:\n        (itfit.plot.builder.PlotBuilder): Returns itself to continue building the plot.\n    \"\"\"\n    return self.labels().start_x_label(xlabel).end_xlabel().end_labels()\n</code></pre>"},{"location":"reference/itfit/plot/builder/#itfit.plot.builder.PlotBuilder.ylabel","title":"<code>ylabel(ylabel)</code>","text":"<p>Shortcut to <code>.labels().start_y_label(ylabel).end_ylabel().end_labels()</code>.</p> <p>Parameters:</p> Name Type Description Default <code>ylabel</code> <code>str</code> <p>y label string.</p> required <p>Returns:</p> Type Description <code>itfit.plot.builder.PlotBuilder</code> <p>Returns itself to continue building the plot.</p> Source code in <code>itfit/plot/builder.py</code> <pre><code>def ylabel(self, ylabel):\n\"\"\"Shortcut to `.labels().start_y_label(ylabel).end_ylabel().end_labels()`.\n\n    Args:\n        ylabel (str): y label string.\n\n    Returns:\n        (itfit.plot.builder.PlotBuilder): Returns itself to continue building the plot.\n    \"\"\"\n    return self.labels().start_y_label(ylabel).end_ylabel().end_labels()\n</code></pre>"},{"location":"reference/itfit/plot/labels/","title":"Labels","text":""},{"location":"reference/itfit/plot/labels/#itfit.plot.labels.GenericLabelBuilder","title":"<code>GenericLabelBuilder</code>","text":"Source code in <code>itfit/plot/labels.py</code> <pre><code>class GenericLabelBuilder:\n    def __init__(self, plot_builder: PlotBuilder, label: str):\n\"\"\"Abstract label builder. Use xLabelBuilder, yLabelBuilder or titleLabelBuilder.\n\n        Args:\n            plot_builder (itfit.plot.PlotBuilder): PlotBuilder instance.\n            label (str): Label string.\n        \"\"\"\n        self._plot_builder_ = plot_builder\n        self._label_ = label\n        self._dict_: dict[str, object] = {}\n\n    def fontsize(self, size):\n\"\"\"Sets label fontsize.\n\n        Args:\n            size (float): Size of the label.\n\n        Returns:\n            (itfit.plot.labels.GenericLabelBuilder): Returns itself.\n        \"\"\"\n        self._dict_.update({'fontsize': size})\n        return self\n\n    def fontweight(self, weight):\n\"\"\"TODO:\n\n        Args:\n            weight (_type_): _description_\n\n        Returns:\n            (itfit.plot.labels.GenericLabelBuilder): Returns itself.\n        \"\"\"\n        self._dict_.update({'fontweight': weight})\n        return self\n\n    def color(self, color):\n\"\"\"Sets the color of the label.\n\n        Args:\n            color (str|tuple[float]): Color for the label.\n\n        Returns:\n            (itfit.plot.labels.GenericLabelBuilder): Returns itself.\n        \"\"\"\n        self._dict_.update({'color': color})\n        return self\n\n    def verticalalignment(self, loc):\n\"\"\"TODO:\n\n        Args:\n            loc (_type_): _description_\n\n        Returns:\n            (itfit.plot.labels.GenericLabelBuilder): Returns itself.\n        \"\"\"\n        self._dict_.update({'verticalalignment': loc})\n        return self\n\n    def horizontalalignment(self, loc):\n\"\"\"TODO\n\n        Args:\n            loc (_type_): _description_\n\n        Returns:\n            (itfit.plot.labels.GenericLabelBuilder): Returns itself.\n        \"\"\"\n        self._dict_.update({'horizontalalignment': loc})\n        return self\n</code></pre>"},{"location":"reference/itfit/plot/labels/#itfit.plot.labels.GenericLabelBuilder.__init__","title":"<code>__init__(plot_builder, label)</code>","text":"<p>Abstract label builder. Use xLabelBuilder, yLabelBuilder or titleLabelBuilder.</p> <p>Parameters:</p> Name Type Description Default <code>plot_builder</code> <code>itfit.plot.PlotBuilder</code> <p>PlotBuilder instance.</p> required <code>label</code> <code>str</code> <p>Label string.</p> required Source code in <code>itfit/plot/labels.py</code> <pre><code>def __init__(self, plot_builder: PlotBuilder, label: str):\n\"\"\"Abstract label builder. Use xLabelBuilder, yLabelBuilder or titleLabelBuilder.\n\n    Args:\n        plot_builder (itfit.plot.PlotBuilder): PlotBuilder instance.\n        label (str): Label string.\n    \"\"\"\n    self._plot_builder_ = plot_builder\n    self._label_ = label\n    self._dict_: dict[str, object] = {}\n</code></pre>"},{"location":"reference/itfit/plot/labels/#itfit.plot.labels.GenericLabelBuilder.color","title":"<code>color(color)</code>","text":"<p>Sets the color of the label.</p> <p>Parameters:</p> Name Type Description Default <code>color</code> <code>str | tuple[float]</code> <p>Color for the label.</p> required <p>Returns:</p> Type Description <code>itfit.plot.labels.GenericLabelBuilder</code> <p>Returns itself.</p> Source code in <code>itfit/plot/labels.py</code> <pre><code>def color(self, color):\n\"\"\"Sets the color of the label.\n\n    Args:\n        color (str|tuple[float]): Color for the label.\n\n    Returns:\n        (itfit.plot.labels.GenericLabelBuilder): Returns itself.\n    \"\"\"\n    self._dict_.update({'color': color})\n    return self\n</code></pre>"},{"location":"reference/itfit/plot/labels/#itfit.plot.labels.GenericLabelBuilder.fontsize","title":"<code>fontsize(size)</code>","text":"<p>Sets label fontsize.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>float</code> <p>Size of the label.</p> required <p>Returns:</p> Type Description <code>itfit.plot.labels.GenericLabelBuilder</code> <p>Returns itself.</p> Source code in <code>itfit/plot/labels.py</code> <pre><code>def fontsize(self, size):\n\"\"\"Sets label fontsize.\n\n    Args:\n        size (float): Size of the label.\n\n    Returns:\n        (itfit.plot.labels.GenericLabelBuilder): Returns itself.\n    \"\"\"\n    self._dict_.update({'fontsize': size})\n    return self\n</code></pre>"},{"location":"reference/itfit/plot/labels/#itfit.plot.labels.GenericLabelBuilder.fontweight","title":"<code>fontweight(weight)</code>","text":"<p>TODO:</p> <p>Parameters:</p> Name Type Description Default <code>weight</code> <code>_type_</code> <p>description</p> required <p>Returns:</p> Type Description <code>itfit.plot.labels.GenericLabelBuilder</code> <p>Returns itself.</p> Source code in <code>itfit/plot/labels.py</code> <pre><code>def fontweight(self, weight):\n\"\"\"TODO:\n\n    Args:\n        weight (_type_): _description_\n\n    Returns:\n        (itfit.plot.labels.GenericLabelBuilder): Returns itself.\n    \"\"\"\n    self._dict_.update({'fontweight': weight})\n    return self\n</code></pre>"},{"location":"reference/itfit/plot/labels/#itfit.plot.labels.GenericLabelBuilder.horizontalalignment","title":"<code>horizontalalignment(loc)</code>","text":"<p>TODO</p> <p>Parameters:</p> Name Type Description Default <code>loc</code> <code>_type_</code> <p>description</p> required <p>Returns:</p> Type Description <code>itfit.plot.labels.GenericLabelBuilder</code> <p>Returns itself.</p> Source code in <code>itfit/plot/labels.py</code> <pre><code>def horizontalalignment(self, loc):\n\"\"\"TODO\n\n    Args:\n        loc (_type_): _description_\n\n    Returns:\n        (itfit.plot.labels.GenericLabelBuilder): Returns itself.\n    \"\"\"\n    self._dict_.update({'horizontalalignment': loc})\n    return self\n</code></pre>"},{"location":"reference/itfit/plot/labels/#itfit.plot.labels.GenericLabelBuilder.verticalalignment","title":"<code>verticalalignment(loc)</code>","text":"<p>TODO:</p> <p>Parameters:</p> Name Type Description Default <code>loc</code> <code>_type_</code> <p>description</p> required <p>Returns:</p> Type Description <code>itfit.plot.labels.GenericLabelBuilder</code> <p>Returns itself.</p> Source code in <code>itfit/plot/labels.py</code> <pre><code>def verticalalignment(self, loc):\n\"\"\"TODO:\n\n    Args:\n        loc (_type_): _description_\n\n    Returns:\n        (itfit.plot.labels.GenericLabelBuilder): Returns itself.\n    \"\"\"\n    self._dict_.update({'verticalalignment': loc})\n    return self\n</code></pre>"},{"location":"reference/itfit/plot/labels/#itfit.plot.labels.LabelBuilder","title":"<code>LabelBuilder</code>","text":"Source code in <code>itfit/plot/labels.py</code> <pre><code>class LabelBuilder:\n    def __init__(self, plot_builder: PlotBuilder):\n\"\"\"Starts a LabelBuilder. Used to modify axis labels.\n\n        Args:\n            plot_builder (PlotBuilder): PlotBuilder to return when exit.\n        \"\"\"\n        self._plot_builder_ = plot_builder\n\n\n    def start_x_label(self, label):\n\"\"\"Starts a x label builder.\n\n        Args:\n            label (str): x axis label.\n\n        Returns:\n            (itfit.plot.labels.xLabelBuilder): x label builder.\n        \"\"\"\n        return xLabelBuilder(self._plot_builder_, self,  label)\n\n    def start_y_label(self, label):\n\"\"\"Starts a y label builder.\n\n        Args:\n            label (str): y axis label.\n\n        Returns:\n            (itfit.plot.labels.yLabelBuilder): y label builder.\n        \"\"\"\n        return yLabelBuilder(self._plot_builder_, self, label)\n\n    def start_title(self, title):\n\"\"\"Starts a title label builder.\n\n        Args:\n            title (str): title label.\n\n        Returns:\n            (itfit.plot.labels.titleLabelBuilder): title label builder.\n        \"\"\"\n        return titleLabelBuilder(self._plot_builder_, self, title)\n\n    def end_labels(self):\n\"\"\"Exits labels builder.\n\n        Returns:\n            (itft.plot.PlotBuilder): Returns the PlotBuilder.\n        \"\"\"\n        return self._plot_builder_\n</code></pre>"},{"location":"reference/itfit/plot/labels/#itfit.plot.labels.LabelBuilder.__init__","title":"<code>__init__(plot_builder)</code>","text":"<p>Starts a LabelBuilder. Used to modify axis labels.</p> <p>Parameters:</p> Name Type Description Default <code>plot_builder</code> <code>PlotBuilder</code> <p>PlotBuilder to return when exit.</p> required Source code in <code>itfit/plot/labels.py</code> <pre><code>def __init__(self, plot_builder: PlotBuilder):\n\"\"\"Starts a LabelBuilder. Used to modify axis labels.\n\n    Args:\n        plot_builder (PlotBuilder): PlotBuilder to return when exit.\n    \"\"\"\n    self._plot_builder_ = plot_builder\n</code></pre>"},{"location":"reference/itfit/plot/labels/#itfit.plot.labels.LabelBuilder.end_labels","title":"<code>end_labels()</code>","text":"<p>Exits labels builder.</p> <p>Returns:</p> Type Description <code>itft.plot.PlotBuilder</code> <p>Returns the PlotBuilder.</p> Source code in <code>itfit/plot/labels.py</code> <pre><code>def end_labels(self):\n\"\"\"Exits labels builder.\n\n    Returns:\n        (itft.plot.PlotBuilder): Returns the PlotBuilder.\n    \"\"\"\n    return self._plot_builder_\n</code></pre>"},{"location":"reference/itfit/plot/labels/#itfit.plot.labels.LabelBuilder.start_title","title":"<code>start_title(title)</code>","text":"<p>Starts a title label builder.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>title label.</p> required <p>Returns:</p> Type Description <code>itfit.plot.labels.titleLabelBuilder</code> <p>title label builder.</p> Source code in <code>itfit/plot/labels.py</code> <pre><code>def start_title(self, title):\n\"\"\"Starts a title label builder.\n\n    Args:\n        title (str): title label.\n\n    Returns:\n        (itfit.plot.labels.titleLabelBuilder): title label builder.\n    \"\"\"\n    return titleLabelBuilder(self._plot_builder_, self, title)\n</code></pre>"},{"location":"reference/itfit/plot/labels/#itfit.plot.labels.LabelBuilder.start_x_label","title":"<code>start_x_label(label)</code>","text":"<p>Starts a x label builder.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>str</code> <p>x axis label.</p> required <p>Returns:</p> Type Description <code>itfit.plot.labels.xLabelBuilder</code> <p>x label builder.</p> Source code in <code>itfit/plot/labels.py</code> <pre><code>def start_x_label(self, label):\n\"\"\"Starts a x label builder.\n\n    Args:\n        label (str): x axis label.\n\n    Returns:\n        (itfit.plot.labels.xLabelBuilder): x label builder.\n    \"\"\"\n    return xLabelBuilder(self._plot_builder_, self,  label)\n</code></pre>"},{"location":"reference/itfit/plot/labels/#itfit.plot.labels.LabelBuilder.start_y_label","title":"<code>start_y_label(label)</code>","text":"<p>Starts a y label builder.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>str</code> <p>y axis label.</p> required <p>Returns:</p> Type Description <code>itfit.plot.labels.yLabelBuilder</code> <p>y label builder.</p> Source code in <code>itfit/plot/labels.py</code> <pre><code>def start_y_label(self, label):\n\"\"\"Starts a y label builder.\n\n    Args:\n        label (str): y axis label.\n\n    Returns:\n        (itfit.plot.labels.yLabelBuilder): y label builder.\n    \"\"\"\n    return yLabelBuilder(self._plot_builder_, self, label)\n</code></pre>"},{"location":"reference/itfit/plot/labels/#itfit.plot.labels.titleLabelBuilder","title":"<code>titleLabelBuilder</code>","text":"<p>         Bases: <code>GenericLabelBuilder</code></p> <p>Specific implementation of GenericLabelBuilder for the title label.</p> Source code in <code>itfit/plot/labels.py</code> <pre><code>class titleLabelBuilder(GenericLabelBuilder):\n\"\"\"Specific implementation of GenericLabelBuilder for the title label.\n    \"\"\"\n    def __init__(self, plot_builder, label_builder: LabelBuilder, label: str):\n        super().__init__(plot_builder, label)\n        self._label_builder_ = label_builder\n\n    def end_title(self):\n\"\"\"Ends title label builder.\n\n        Returns:\n            (itfit.plot.labels.LabelBuilder): Returns the LabelBuilder.\n        \"\"\"\n        self._plot_builder_.ax.set_title(self._label_, self._dict_)\n        return self._label_builder_\n</code></pre>"},{"location":"reference/itfit/plot/labels/#itfit.plot.labels.titleLabelBuilder.end_title","title":"<code>end_title()</code>","text":"<p>Ends title label builder.</p> <p>Returns:</p> Type Description <code>itfit.plot.labels.LabelBuilder</code> <p>Returns the LabelBuilder.</p> Source code in <code>itfit/plot/labels.py</code> <pre><code>def end_title(self):\n\"\"\"Ends title label builder.\n\n    Returns:\n        (itfit.plot.labels.LabelBuilder): Returns the LabelBuilder.\n    \"\"\"\n    self._plot_builder_.ax.set_title(self._label_, self._dict_)\n    return self._label_builder_\n</code></pre>"},{"location":"reference/itfit/plot/labels/#itfit.plot.labels.xLabelBuilder","title":"<code>xLabelBuilder</code>","text":"<p>         Bases: <code>GenericLabelBuilder</code></p> <p>Specific implementation of GenericLabelBuilder for x label.</p> Source code in <code>itfit/plot/labels.py</code> <pre><code>class xLabelBuilder(GenericLabelBuilder):\n\"\"\"Specific implementation of GenericLabelBuilder for x label.\n    \"\"\"\n    def __init__(self, plot_builder: PlotBuilder, label_builder: LabelBuilder, label: str):\n        super().__init__(plot_builder, label)\n        self._label_builder_ = label_builder\n\n    def end_xlabel(self):\n\"\"\"Ends x label builder.\n\n        Returns:\n            (itfit.plot.labels.LabelBuilder): Returns the LabelBuilder.\n        \"\"\"\n        self._plot_builder_.ax.set_xlabel(self._label_, self._dict_)\n        return self._label_builder_\n</code></pre>"},{"location":"reference/itfit/plot/labels/#itfit.plot.labels.xLabelBuilder.end_xlabel","title":"<code>end_xlabel()</code>","text":"<p>Ends x label builder.</p> <p>Returns:</p> Type Description <code>itfit.plot.labels.LabelBuilder</code> <p>Returns the LabelBuilder.</p> Source code in <code>itfit/plot/labels.py</code> <pre><code>def end_xlabel(self):\n\"\"\"Ends x label builder.\n\n    Returns:\n        (itfit.plot.labels.LabelBuilder): Returns the LabelBuilder.\n    \"\"\"\n    self._plot_builder_.ax.set_xlabel(self._label_, self._dict_)\n    return self._label_builder_\n</code></pre>"},{"location":"reference/itfit/plot/labels/#itfit.plot.labels.yLabelBuilder","title":"<code>yLabelBuilder</code>","text":"<p>         Bases: <code>GenericLabelBuilder</code></p> <p>Specific implementation of GenericLabelBuilder for y label.</p> Source code in <code>itfit/plot/labels.py</code> <pre><code>class yLabelBuilder(GenericLabelBuilder):\n\"\"\"Specific implementation of GenericLabelBuilder for y label.\n    \"\"\"\n    def __init__(self, plot_builder, label_builder: LabelBuilder, label: str):\n        super().__init__(plot_builder, label)\n        self._label_builder_ = label_builder\n\n    def end_ylabel(self):\n\"\"\"Ends y label builder.\n\n        Returns:\n            (itfit.plot.labels.LabelBuilder): Returns the LabelBuilder.\n        \"\"\"\n        self._plot_builder_.ax.set_ylabel(self._label_, self._dict_)\n        return self._label_builder_\n</code></pre>"},{"location":"reference/itfit/plot/labels/#itfit.plot.labels.yLabelBuilder.end_ylabel","title":"<code>end_ylabel()</code>","text":"<p>Ends y label builder.</p> <p>Returns:</p> Type Description <code>itfit.plot.labels.LabelBuilder</code> <p>Returns the LabelBuilder.</p> Source code in <code>itfit/plot/labels.py</code> <pre><code>def end_ylabel(self):\n\"\"\"Ends y label builder.\n\n    Returns:\n        (itfit.plot.labels.LabelBuilder): Returns the LabelBuilder.\n    \"\"\"\n    self._plot_builder_.ax.set_ylabel(self._label_, self._dict_)\n    return self._label_builder_\n</code></pre>"},{"location":"reference/itfit/plot/spines/","title":"Spines","text":""},{"location":"reference/itfit/plot/spines/#itfit.plot.spines.GenericSpineBuilder","title":"<code>GenericSpineBuilder</code>","text":"Source code in <code>itfit/plot/spines.py</code> <pre><code>class GenericSpineBuilder:\n    def __init__(self, plot_builder: PlotBuilder, spine_builder: SpineBuilder):\n\"\"\"Spine builder. Used to modify plot spines.\n\n        Args:\n            plot_builder (itfit.plot.spines.GenericSpineBuilder): GenericSpineBuilder instance.\n        \"\"\"\n        self._plot_builder_ = plot_builder\n        self._spine_builder_ = spine_builder\n        self._dict_: dict[str, object] = {}\n\n    def alpha(self, alpha: float):\n\"\"\"Sets spines alpha.\n\n        Args:\n            alpha (float): alpha value\n\n        Returns:\n            (itfit.plot.spines.GenericSpineBuilder): Returns itself.\n        \"\"\"\n        self._dict_.update({'alpha':alpha})\n        return self\n\n    def visible(self):\n\"\"\"Sets spine visible.\n\n        Returns:\n            (itfit.plot.spines.GenericSpineBuilder): Returns itself.\n        \"\"\"\n        self._dict_.update({'visible':True})\n        return self\n\n    def invisible(self):\n\"\"\"Sets spine invisible.\n\n        Returns:\n            (itfit.plot.spines.GenericSpineBuilder): Returns itself.\n        \"\"\"\n        self._dict_.update({'visible':False})\n        return self\n\n    def color(self, color):\n\"\"\"Sets the color of the spine.\n\n        Args:\n            color (str|tuple[float]): Color for the spine.\n\n        Returns:\n            (itfit.plot.spines.GenericSpineBuilder): Returns itself.\n        \"\"\"\n        self._dict_.update({'color': color})\n        return self\n\n    def linestyle(self, linestyle):\n\"\"\"Changes spine linestyle.\n\n        Args:\n            linestyle (str): Spine linestyle.\n\n        Returns:\n            (itfit.plot.spines.GenericSpineBuilder): Returns itself.\n        \"\"\"\n        self._dict_.update({'linestyle': linestyle})\n        return self\n\n    def linewidth(self, linewidth):\n\"\"\"Changes spine linewidth.\n\n        Args:\n            linewidth (float): Spine linewidth.\n\n        Returns:\n            (itfit.plot.spines.GenericSpineBuilder): Returns itself.\n        \"\"\"\n        self._dict_.update({'linewidth': linewidth})\n        return self\n\n    def _end_spine_builder(self, spine):\n        self._plot_builder_.ax.spines[spine].set(**self._dict_)\n        return self._spine_builder_\n</code></pre>"},{"location":"reference/itfit/plot/spines/#itfit.plot.spines.GenericSpineBuilder.__init__","title":"<code>__init__(plot_builder, spine_builder)</code>","text":"<p>Spine builder. Used to modify plot spines.</p> <p>Parameters:</p> Name Type Description Default <code>plot_builder</code> <code>itfit.plot.spines.GenericSpineBuilder</code> <p>GenericSpineBuilder instance.</p> required Source code in <code>itfit/plot/spines.py</code> <pre><code>def __init__(self, plot_builder: PlotBuilder, spine_builder: SpineBuilder):\n\"\"\"Spine builder. Used to modify plot spines.\n\n    Args:\n        plot_builder (itfit.plot.spines.GenericSpineBuilder): GenericSpineBuilder instance.\n    \"\"\"\n    self._plot_builder_ = plot_builder\n    self._spine_builder_ = spine_builder\n    self._dict_: dict[str, object] = {}\n</code></pre>"},{"location":"reference/itfit/plot/spines/#itfit.plot.spines.GenericSpineBuilder.alpha","title":"<code>alpha(alpha)</code>","text":"<p>Sets spines alpha.</p> <p>Parameters:</p> Name Type Description Default <code>alpha</code> <code>float</code> <p>alpha value</p> required <p>Returns:</p> Type Description <code>itfit.plot.spines.GenericSpineBuilder</code> <p>Returns itself.</p> Source code in <code>itfit/plot/spines.py</code> <pre><code>def alpha(self, alpha: float):\n\"\"\"Sets spines alpha.\n\n    Args:\n        alpha (float): alpha value\n\n    Returns:\n        (itfit.plot.spines.GenericSpineBuilder): Returns itself.\n    \"\"\"\n    self._dict_.update({'alpha':alpha})\n    return self\n</code></pre>"},{"location":"reference/itfit/plot/spines/#itfit.plot.spines.GenericSpineBuilder.color","title":"<code>color(color)</code>","text":"<p>Sets the color of the spine.</p> <p>Parameters:</p> Name Type Description Default <code>color</code> <code>str | tuple[float]</code> <p>Color for the spine.</p> required <p>Returns:</p> Type Description <code>itfit.plot.spines.GenericSpineBuilder</code> <p>Returns itself.</p> Source code in <code>itfit/plot/spines.py</code> <pre><code>def color(self, color):\n\"\"\"Sets the color of the spine.\n\n    Args:\n        color (str|tuple[float]): Color for the spine.\n\n    Returns:\n        (itfit.plot.spines.GenericSpineBuilder): Returns itself.\n    \"\"\"\n    self._dict_.update({'color': color})\n    return self\n</code></pre>"},{"location":"reference/itfit/plot/spines/#itfit.plot.spines.GenericSpineBuilder.invisible","title":"<code>invisible()</code>","text":"<p>Sets spine invisible.</p> <p>Returns:</p> Type Description <code>itfit.plot.spines.GenericSpineBuilder</code> <p>Returns itself.</p> Source code in <code>itfit/plot/spines.py</code> <pre><code>def invisible(self):\n\"\"\"Sets spine invisible.\n\n    Returns:\n        (itfit.plot.spines.GenericSpineBuilder): Returns itself.\n    \"\"\"\n    self._dict_.update({'visible':False})\n    return self\n</code></pre>"},{"location":"reference/itfit/plot/spines/#itfit.plot.spines.GenericSpineBuilder.linestyle","title":"<code>linestyle(linestyle)</code>","text":"<p>Changes spine linestyle.</p> <p>Parameters:</p> Name Type Description Default <code>linestyle</code> <code>str</code> <p>Spine linestyle.</p> required <p>Returns:</p> Type Description <code>itfit.plot.spines.GenericSpineBuilder</code> <p>Returns itself.</p> Source code in <code>itfit/plot/spines.py</code> <pre><code>def linestyle(self, linestyle):\n\"\"\"Changes spine linestyle.\n\n    Args:\n        linestyle (str): Spine linestyle.\n\n    Returns:\n        (itfit.plot.spines.GenericSpineBuilder): Returns itself.\n    \"\"\"\n    self._dict_.update({'linestyle': linestyle})\n    return self\n</code></pre>"},{"location":"reference/itfit/plot/spines/#itfit.plot.spines.GenericSpineBuilder.linewidth","title":"<code>linewidth(linewidth)</code>","text":"<p>Changes spine linewidth.</p> <p>Parameters:</p> Name Type Description Default <code>linewidth</code> <code>float</code> <p>Spine linewidth.</p> required <p>Returns:</p> Type Description <code>itfit.plot.spines.GenericSpineBuilder</code> <p>Returns itself.</p> Source code in <code>itfit/plot/spines.py</code> <pre><code>def linewidth(self, linewidth):\n\"\"\"Changes spine linewidth.\n\n    Args:\n        linewidth (float): Spine linewidth.\n\n    Returns:\n        (itfit.plot.spines.GenericSpineBuilder): Returns itself.\n    \"\"\"\n    self._dict_.update({'linewidth': linewidth})\n    return self\n</code></pre>"},{"location":"reference/itfit/plot/spines/#itfit.plot.spines.GenericSpineBuilder.visible","title":"<code>visible()</code>","text":"<p>Sets spine visible.</p> <p>Returns:</p> Type Description <code>itfit.plot.spines.GenericSpineBuilder</code> <p>Returns itself.</p> Source code in <code>itfit/plot/spines.py</code> <pre><code>def visible(self):\n\"\"\"Sets spine visible.\n\n    Returns:\n        (itfit.plot.spines.GenericSpineBuilder): Returns itself.\n    \"\"\"\n    self._dict_.update({'visible':True})\n    return self\n</code></pre>"},{"location":"reference/itfit/plot/spines/#itfit.plot.spines.SpineBuilder","title":"<code>SpineBuilder</code>","text":"Source code in <code>itfit/plot/spines.py</code> <pre><code>class SpineBuilder:\n    def __init__(self, plot_builder: PlotBuilder):\n\"\"\"Spine builder. Used to modify plot spines.\n\n        Args:\n            plot_builder (itfit.plot.PlotBuilder): PlotBuilder instance.\n        \"\"\"\n        self._plot_builder_ = plot_builder\n        self._dict_: dict[str, object] = {}\n\n    def start_left_spine(self):\n\"\"\"Starts a left spine builder.\n\n        Returns:\n            (itift.plot.spines.leftSpineBuilder): left spine builder.\n        \"\"\"\n        return leftSpineBuilder(self._plot_builder_, self)\n\n    def start_right_spine(self):\n\"\"\"Starts a right spine builder.\n\n        Returns:\n            (itift.plot.spines.rightSpineBuilder): right spine builder.\n        \"\"\"\n        return rightSpineBuilder(self._plot_builder_, self)\n\n    def start_top_spine(self):\n\"\"\"Starts a top spine builder.\n\n        Returns:\n            (itift.plot.spines.topSpineBuilder): top spine builder.\n        \"\"\"\n        return topSpineBuilder(self._plot_builder_, self)\n\n    def start_bottom_spine(self):\n\"\"\"Starts a bottom spine builder.\n\n        Returns:\n            (itift.plot.spines.bottomSpineBuilder): bottom spine builder.\n        \"\"\"\n        return bottomSpineBuilder(self._plot_builder_, self)\n\n    def end_spines(self):\n\"\"\"Ends spine builder.\n\n        Returns:\n            (itfit.plot.PlotBuilder): Returns the PlotBuilder.\n        \"\"\"\n        return self._plot_builder_\n</code></pre>"},{"location":"reference/itfit/plot/spines/#itfit.plot.spines.SpineBuilder.__init__","title":"<code>__init__(plot_builder)</code>","text":"<p>Spine builder. Used to modify plot spines.</p> <p>Parameters:</p> Name Type Description Default <code>plot_builder</code> <code>itfit.plot.PlotBuilder</code> <p>PlotBuilder instance.</p> required Source code in <code>itfit/plot/spines.py</code> <pre><code>def __init__(self, plot_builder: PlotBuilder):\n\"\"\"Spine builder. Used to modify plot spines.\n\n    Args:\n        plot_builder (itfit.plot.PlotBuilder): PlotBuilder instance.\n    \"\"\"\n    self._plot_builder_ = plot_builder\n    self._dict_: dict[str, object] = {}\n</code></pre>"},{"location":"reference/itfit/plot/spines/#itfit.plot.spines.SpineBuilder.end_spines","title":"<code>end_spines()</code>","text":"<p>Ends spine builder.</p> <p>Returns:</p> Type Description <code>itfit.plot.PlotBuilder</code> <p>Returns the PlotBuilder.</p> Source code in <code>itfit/plot/spines.py</code> <pre><code>def end_spines(self):\n\"\"\"Ends spine builder.\n\n    Returns:\n        (itfit.plot.PlotBuilder): Returns the PlotBuilder.\n    \"\"\"\n    return self._plot_builder_\n</code></pre>"},{"location":"reference/itfit/plot/spines/#itfit.plot.spines.SpineBuilder.start_bottom_spine","title":"<code>start_bottom_spine()</code>","text":"<p>Starts a bottom spine builder.</p> <p>Returns:</p> Type Description <code>itift.plot.spines.bottomSpineBuilder</code> <p>bottom spine builder.</p> Source code in <code>itfit/plot/spines.py</code> <pre><code>def start_bottom_spine(self):\n\"\"\"Starts a bottom spine builder.\n\n    Returns:\n        (itift.plot.spines.bottomSpineBuilder): bottom spine builder.\n    \"\"\"\n    return bottomSpineBuilder(self._plot_builder_, self)\n</code></pre>"},{"location":"reference/itfit/plot/spines/#itfit.plot.spines.SpineBuilder.start_left_spine","title":"<code>start_left_spine()</code>","text":"<p>Starts a left spine builder.</p> <p>Returns:</p> Type Description <code>itift.plot.spines.leftSpineBuilder</code> <p>left spine builder.</p> Source code in <code>itfit/plot/spines.py</code> <pre><code>def start_left_spine(self):\n\"\"\"Starts a left spine builder.\n\n    Returns:\n        (itift.plot.spines.leftSpineBuilder): left spine builder.\n    \"\"\"\n    return leftSpineBuilder(self._plot_builder_, self)\n</code></pre>"},{"location":"reference/itfit/plot/spines/#itfit.plot.spines.SpineBuilder.start_right_spine","title":"<code>start_right_spine()</code>","text":"<p>Starts a right spine builder.</p> <p>Returns:</p> Type Description <code>itift.plot.spines.rightSpineBuilder</code> <p>right spine builder.</p> Source code in <code>itfit/plot/spines.py</code> <pre><code>def start_right_spine(self):\n\"\"\"Starts a right spine builder.\n\n    Returns:\n        (itift.plot.spines.rightSpineBuilder): right spine builder.\n    \"\"\"\n    return rightSpineBuilder(self._plot_builder_, self)\n</code></pre>"},{"location":"reference/itfit/plot/spines/#itfit.plot.spines.SpineBuilder.start_top_spine","title":"<code>start_top_spine()</code>","text":"<p>Starts a top spine builder.</p> <p>Returns:</p> Type Description <code>itift.plot.spines.topSpineBuilder</code> <p>top spine builder.</p> Source code in <code>itfit/plot/spines.py</code> <pre><code>def start_top_spine(self):\n\"\"\"Starts a top spine builder.\n\n    Returns:\n        (itift.plot.spines.topSpineBuilder): top spine builder.\n    \"\"\"\n    return topSpineBuilder(self._plot_builder_, self)\n</code></pre>"},{"location":"reference/itfit/plot/spines/#itfit.plot.spines.bottomSpineBuilder","title":"<code>bottomSpineBuilder</code>","text":"<p>         Bases: <code>GenericSpineBuilder</code></p> Source code in <code>itfit/plot/spines.py</code> <pre><code>class bottomSpineBuilder(GenericSpineBuilder):\n    def __init__(self, plot_builder, spine_builder):\n        super().__init__(plot_builder, spine_builder)\n        self._spine = \"bottom\"\n\n    def end_bottom_spine(self):\n\"\"\"Ends bottom spine builder.\n\n        Returns:\n            (itfit.plot.PlotBuilder): Returns the PlotBuilder.\n        \"\"\"\n        return self._end_spine_builder(self._spine)\n</code></pre>"},{"location":"reference/itfit/plot/spines/#itfit.plot.spines.bottomSpineBuilder.end_bottom_spine","title":"<code>end_bottom_spine()</code>","text":"<p>Ends bottom spine builder.</p> <p>Returns:</p> Type Description <code>itfit.plot.PlotBuilder</code> <p>Returns the PlotBuilder.</p> Source code in <code>itfit/plot/spines.py</code> <pre><code>def end_bottom_spine(self):\n\"\"\"Ends bottom spine builder.\n\n    Returns:\n        (itfit.plot.PlotBuilder): Returns the PlotBuilder.\n    \"\"\"\n    return self._end_spine_builder(self._spine)\n</code></pre>"},{"location":"reference/itfit/plot/spines/#itfit.plot.spines.leftSpineBuilder","title":"<code>leftSpineBuilder</code>","text":"<p>         Bases: <code>GenericSpineBuilder</code></p> Source code in <code>itfit/plot/spines.py</code> <pre><code>class leftSpineBuilder(GenericSpineBuilder):\n    def __init__(self, plot_builder, spine_builder):\n        super().__init__(plot_builder, spine_builder)\n        self._spine = \"left\"\n\n    def end_left_spine(self):\n\"\"\"Ends left spine builder.\n\n        Returns:\n            (itfit.plot.PlotBuilder): Returns the PlotBuilder.\n        \"\"\"\n        return self._end_spine_builder(self._spine)\n</code></pre>"},{"location":"reference/itfit/plot/spines/#itfit.plot.spines.leftSpineBuilder.end_left_spine","title":"<code>end_left_spine()</code>","text":"<p>Ends left spine builder.</p> <p>Returns:</p> Type Description <code>itfit.plot.PlotBuilder</code> <p>Returns the PlotBuilder.</p> Source code in <code>itfit/plot/spines.py</code> <pre><code>def end_left_spine(self):\n\"\"\"Ends left spine builder.\n\n    Returns:\n        (itfit.plot.PlotBuilder): Returns the PlotBuilder.\n    \"\"\"\n    return self._end_spine_builder(self._spine)\n</code></pre>"},{"location":"reference/itfit/plot/spines/#itfit.plot.spines.rightSpineBuilder","title":"<code>rightSpineBuilder</code>","text":"<p>         Bases: <code>GenericSpineBuilder</code></p> Source code in <code>itfit/plot/spines.py</code> <pre><code>class rightSpineBuilder(GenericSpineBuilder):\n    def __init__(self, plot_builder, spine_builder):\n        super().__init__(plot_builder, spine_builder)\n        self._spine = \"right\"\n\n    def end_right_spine(self):\n\"\"\"Ends right spine builder.\n\n        Returns:\n            (itfit.plot.PlotBuilder): Returns the PlotBuilder.\n        \"\"\"\n        return self._end_spine_builder(self._spine)\n</code></pre>"},{"location":"reference/itfit/plot/spines/#itfit.plot.spines.rightSpineBuilder.end_right_spine","title":"<code>end_right_spine()</code>","text":"<p>Ends right spine builder.</p> <p>Returns:</p> Type Description <code>itfit.plot.PlotBuilder</code> <p>Returns the PlotBuilder.</p> Source code in <code>itfit/plot/spines.py</code> <pre><code>def end_right_spine(self):\n\"\"\"Ends right spine builder.\n\n    Returns:\n        (itfit.plot.PlotBuilder): Returns the PlotBuilder.\n    \"\"\"\n    return self._end_spine_builder(self._spine)\n</code></pre>"},{"location":"reference/itfit/plot/spines/#itfit.plot.spines.topSpineBuilder","title":"<code>topSpineBuilder</code>","text":"<p>         Bases: <code>GenericSpineBuilder</code></p> Source code in <code>itfit/plot/spines.py</code> <pre><code>class topSpineBuilder(GenericSpineBuilder):\n    def __init__(self, plot_builder, spine_builder):\n        super().__init__(plot_builder, spine_builder)\n        self._spine = \"top\"\n\n    def end_top_spine(self):\n\"\"\"Ends top spne builder.\n\n        Returns:\n            (itfit.plot.PlotBuilder): Returns the PlotBuilder.\n        \"\"\"\n        return self._end_spine_builder(self._spine)\n</code></pre>"},{"location":"reference/itfit/plot/spines/#itfit.plot.spines.topSpineBuilder.end_top_spine","title":"<code>end_top_spine()</code>","text":"<p>Ends top spne builder.</p> <p>Returns:</p> Type Description <code>itfit.plot.PlotBuilder</code> <p>Returns the PlotBuilder.</p> Source code in <code>itfit/plot/spines.py</code> <pre><code>def end_top_spine(self):\n\"\"\"Ends top spne builder.\n\n    Returns:\n        (itfit.plot.PlotBuilder): Returns the PlotBuilder.\n    \"\"\"\n    return self._end_spine_builder(self._spine)\n</code></pre>"},{"location":"reference/itfit/utils/","title":"Index","text":"<p>TODO</p>"},{"location":"reference/itfit/utils/blit_manager/","title":"Blit manager","text":""},{"location":"reference/itfit/utils/blit_manager/#itfit.utils.blit_manager.BlitManager","title":"<code>BlitManager</code>","text":"<p>Do not use this class unless you know what blitting is and you are familiar with the rest of the code.</p> Source code in <code>itfit/utils/blit_manager.py</code> <pre><code>class BlitManager:\n\"\"\"**Do not use this class unless you know what blitting is and you are familiar with the rest of the code.**\"\"\"\n    def __init__(self, app):\n\"\"\"Class for managing blitting. DragObjects must be appended to `self.artists`.\n        BlitManager must be manualy enabled and disabled.\n        `with` statements can be used to enable or disable blitting temporaly.\n\n        Parameters:\n            app (Fitter):\n                Aplication using BlitManager.\n        \"\"\"\n\n        self.app = app\n        self.ax = app.ax\n        self.canvas = app.figure.canvas\n\n        self.artists = []\n\n        self._enabled_ = False\n        self.background = None\n        self.draw_event_connection_id = None\n\n    def get_background(self):\n\"\"\"\"Gets current background and saves it, used in blitting process.\"\"\"\n        for a in self.artists:\n            a.poly.set_visible(False)\n\n        for a in self.ax.artists:\n            self.ax.draw_artists(a)\n\n        self.canvas.blit()\n\n        return self.canvas.copy_from_bbox(self.ax.bbox)\n\n    def update_background(self):\n\"\"\"Updates saved background, used in blitting process.\"\"\"\n        self.background = self.get_background()\n\n    def draw(self, artists_visible=True):\n\"\"\"Draws the canvas using blitting.\"\"\"\n        self.canvas.restore_region(self.background)\n\n        for a in self.artists:\n            try: # if custom object\n                a.poly.set_visible(artists_visible)\n                self.ax.draw_artist(a.poly)\n            except AttributeError: # if matplotlib artists\n                a.set_visible(artists_visible)\n                self.ax.draw_artis(a)\n\n        self.canvas.blit(self.ax.bbox)\n\n    def on_draw(self, event):\n\"\"\"Trigger for draw event.\"\"\"\n        self.draw()\n\n    def enable(self):\n\"\"\"Enables BlitManager.\"\"\"\n        if not self._enabled_:\n            self.update_background()\n            self._enabled_ = True\n            self.draw_event_connection_id = self.canvas.mpl_connect('draw_event', self.on_draw)\n\n    def disable(self):\n\"\"\"Disables BlitManager.\"\"\"\n        if self._enabled_:\n            self._enabled_ = False\n            self.canvas.mpl_disconnect(self.draw_event_connection_id)\n            self.draw_event_connection_id = None\n\n    def enabled(self):\n\"\"\"Enables Blit Manager and returns itself.\"\"\"\n        self.enable()\n        return self     \n\n    def disabled(self):\n\"\"\"Disables BlitManager, redraws without DragObjects and returns itself.\"\"\"\n        self.disable()\n        self.draw(artists_visible=False)\n        return self\n\n    def __enter__(self, *_):\n        pass\n\n    def __exit__(self, *_):\n        if not self._enabled_:\n            self.enable()\n        else:\n            self.disable()\n</code></pre>"},{"location":"reference/itfit/utils/blit_manager/#itfit.utils.blit_manager.BlitManager.__init__","title":"<code>__init__(app)</code>","text":"<p>Class for managing blitting. DragObjects must be appended to <code>self.artists</code>. BlitManager must be manualy enabled and disabled. <code>with</code> statements can be used to enable or disable blitting temporaly.</p> <p>Parameters:</p> Name Type Description Default <code>app</code> <code>Fitter</code> <p>Aplication using BlitManager.</p> required Source code in <code>itfit/utils/blit_manager.py</code> <pre><code>def __init__(self, app):\n\"\"\"Class for managing blitting. DragObjects must be appended to `self.artists`.\n    BlitManager must be manualy enabled and disabled.\n    `with` statements can be used to enable or disable blitting temporaly.\n\n    Parameters:\n        app (Fitter):\n            Aplication using BlitManager.\n    \"\"\"\n\n    self.app = app\n    self.ax = app.ax\n    self.canvas = app.figure.canvas\n\n    self.artists = []\n\n    self._enabled_ = False\n    self.background = None\n    self.draw_event_connection_id = None\n</code></pre>"},{"location":"reference/itfit/utils/blit_manager/#itfit.utils.blit_manager.BlitManager.disable","title":"<code>disable()</code>","text":"<p>Disables BlitManager.</p> Source code in <code>itfit/utils/blit_manager.py</code> <pre><code>def disable(self):\n\"\"\"Disables BlitManager.\"\"\"\n    if self._enabled_:\n        self._enabled_ = False\n        self.canvas.mpl_disconnect(self.draw_event_connection_id)\n        self.draw_event_connection_id = None\n</code></pre>"},{"location":"reference/itfit/utils/blit_manager/#itfit.utils.blit_manager.BlitManager.disabled","title":"<code>disabled()</code>","text":"<p>Disables BlitManager, redraws without DragObjects and returns itself.</p> Source code in <code>itfit/utils/blit_manager.py</code> <pre><code>def disabled(self):\n\"\"\"Disables BlitManager, redraws without DragObjects and returns itself.\"\"\"\n    self.disable()\n    self.draw(artists_visible=False)\n    return self\n</code></pre>"},{"location":"reference/itfit/utils/blit_manager/#itfit.utils.blit_manager.BlitManager.draw","title":"<code>draw(artists_visible=True)</code>","text":"<p>Draws the canvas using blitting.</p> Source code in <code>itfit/utils/blit_manager.py</code> <pre><code>def draw(self, artists_visible=True):\n\"\"\"Draws the canvas using blitting.\"\"\"\n    self.canvas.restore_region(self.background)\n\n    for a in self.artists:\n        try: # if custom object\n            a.poly.set_visible(artists_visible)\n            self.ax.draw_artist(a.poly)\n        except AttributeError: # if matplotlib artists\n            a.set_visible(artists_visible)\n            self.ax.draw_artis(a)\n\n    self.canvas.blit(self.ax.bbox)\n</code></pre>"},{"location":"reference/itfit/utils/blit_manager/#itfit.utils.blit_manager.BlitManager.enable","title":"<code>enable()</code>","text":"<p>Enables BlitManager.</p> Source code in <code>itfit/utils/blit_manager.py</code> <pre><code>def enable(self):\n\"\"\"Enables BlitManager.\"\"\"\n    if not self._enabled_:\n        self.update_background()\n        self._enabled_ = True\n        self.draw_event_connection_id = self.canvas.mpl_connect('draw_event', self.on_draw)\n</code></pre>"},{"location":"reference/itfit/utils/blit_manager/#itfit.utils.blit_manager.BlitManager.enabled","title":"<code>enabled()</code>","text":"<p>Enables Blit Manager and returns itself.</p> Source code in <code>itfit/utils/blit_manager.py</code> <pre><code>def enabled(self):\n\"\"\"Enables Blit Manager and returns itself.\"\"\"\n    self.enable()\n    return self     \n</code></pre>"},{"location":"reference/itfit/utils/blit_manager/#itfit.utils.blit_manager.BlitManager.get_background","title":"<code>get_background()</code>","text":"<p>\"Gets current background and saves it, used in blitting process.</p> Source code in <code>itfit/utils/blit_manager.py</code> <pre><code>def get_background(self):\n\"\"\"\"Gets current background and saves it, used in blitting process.\"\"\"\n    for a in self.artists:\n        a.poly.set_visible(False)\n\n    for a in self.ax.artists:\n        self.ax.draw_artists(a)\n\n    self.canvas.blit()\n\n    return self.canvas.copy_from_bbox(self.ax.bbox)\n</code></pre>"},{"location":"reference/itfit/utils/blit_manager/#itfit.utils.blit_manager.BlitManager.on_draw","title":"<code>on_draw(event)</code>","text":"<p>Trigger for draw event.</p> Source code in <code>itfit/utils/blit_manager.py</code> <pre><code>def on_draw(self, event):\n\"\"\"Trigger for draw event.\"\"\"\n    self.draw()\n</code></pre>"},{"location":"reference/itfit/utils/blit_manager/#itfit.utils.blit_manager.BlitManager.update_background","title":"<code>update_background()</code>","text":"<p>Updates saved background, used in blitting process.</p> Source code in <code>itfit/utils/blit_manager.py</code> <pre><code>def update_background(self):\n\"\"\"Updates saved background, used in blitting process.\"\"\"\n    self.background = self.get_background()\n</code></pre>"},{"location":"reference/itfit/utils/collection/","title":"Collection","text":""},{"location":"reference/itfit/utils/collection/#itfit.utils.collection.DragPointCollection","title":"<code>DragPointCollection</code>","text":"<p>A collection of DragPoints used to implement complex interactive functions. All collections of DragPoints must inherit from DragPointCollection and implement the following methods:</p> <ul> <li>function: <code>f(x, *args)</code> that returns a float.</li> <li>update: updates <code>DragPointCollection.poly</code> with <code>DragPointCollection.dragpoints</code> positions.</li> <li>get_args: returns arguments needed for function (<code>*args</code>). Must be derived from <code>DragPointCollection.dragpoints</code> positions.</li> </ul> Source code in <code>itfit/utils/collection.py</code> <pre><code>class DragPointCollection:\n\"\"\"A collection of DragPoints used to implement complex interactive functions.\n    All collections of DragPoints must inherit from DragPointCollection and implement the following methods:\n\n    * function: `f(x, *args)` that returns a float.\n    * update: updates `DragPointCollection.poly` with `DragPointCollection.dragpoints` positions.\n    * get_args: returns arguments needed for function (`*args`). Must be derived from `DragPointCollection.dragpoints` positions.\n    \"\"\"\n\n    @staticmethod\n    def function(*args, **kargs): ... \n    def update(self, *args, **kargs):...\n    def get_args(self):...\n\n    # Common methods\n    def __init__(self, dragpoints: list[DragPoint], blit_manager: BlitManager):\n\"\"\"Collection of DragPoints. Used to implement more complicated DragObjects.\n\n        Args:\n            dragpoints (list[DragPoint]): collection vertices.\n            blit_manager (BlitManager): used for automtic ploting.\n        \"\"\"\n\n        self.dragpoints = dragpoints\n        self.blit_manager = blit_manager\n\n        self.ax = blit_manager.ax\n        self.canvas = blit_manager.canvas\n\n        self.poly = Line2D(\n            self.get_xdata_display(),\n            self.get_ydata_display(),\n            linestyle='-',\n            color='red',\n            transform=None\n        )\n\n        self.patch = self.blit_manager.ax.add_patch(self.poly)  \n\n    def get_xy(self, *args):\n\"\"\"Applies and returns correct transformation from display to data coordinates.\n\n        Parameters:\n            *args (List[float,float] | List[List[float,float],...]):\n                Coordinates from display.\n        Returns:\n            (Tuple[float,float] | Tuple[Tuple[float,float],...]):\n                Coordinates from data.\n        \"\"\"\n\n        args  = args if len(args)==2 else args[0]\n        return self.ax.transData.inverted().transform(args)\n\n    def set_xy(self, *args):\n\"\"\"Applies and returns correct transformation from data coordinates to display.\n\n        Parameters:\n            *args (List[float] | List[List[float,float]]):\n                Coordinates from data.\n        Returns:\n            (Tuple[float] | Tuple[Tuple[float,float]]):\n                Coordinates from display.\n        \"\"\"\n        args  = args if len(args)==2 else args[0]\n        return self.ax.transData.transform(args)\n\n    def get_xdata_display(self):\n\"\"\"Gets xdata from DragPoints in display coordinates.\n\n        Returns:\n            (Tuple[float]):\n                x in display coordinates.\n        \"\"\"\n\n        return [p.get_center()[0] for p in self.dragpoints]\n\n    def get_ydata_display(self):\n\"\"\"Gets ydata from DragPoints in display coordinates.\n\n        Returns:\n            (Tuple[float]):\n                y in display coordinates.\n        \"\"\"\n        return [p.get_center()[1] for p in self.dragpoints]\n\n    def get_xdata(self):\n\"\"\"Gets xdata from DragPoints in data coordinates.\n\n        Returns:\n            (Tuple[float]):\n                x in data coordinates.\n        \"\"\"\n        return [self.get_xy(*p.get_center())[0] for p in self.dragpoints]\n\n    def get_ydata(self):\n\"\"\"Gets ydata from DragPoints in data coordinates.\n\n        Returns:\n            (Tuple[float]):\n                y in data coordinates.\n        \"\"\"\n        return [self.get_xy(*p.get_center())[1] for p in self.dragpoints]\n\n    def remove(self):\n\"\"\"Removes the patch from the axes.\"\"\"\n        self.patch.remove()\n</code></pre>"},{"location":"reference/itfit/utils/collection/#itfit.utils.collection.DragPointCollection.__init__","title":"<code>__init__(dragpoints, blit_manager)</code>","text":"<p>Collection of DragPoints. Used to implement more complicated DragObjects.</p> <p>Parameters:</p> Name Type Description Default <code>dragpoints</code> <code>list[DragPoint]</code> <p>collection vertices.</p> required <code>blit_manager</code> <code>BlitManager</code> <p>used for automtic ploting.</p> required Source code in <code>itfit/utils/collection.py</code> <pre><code>def __init__(self, dragpoints: list[DragPoint], blit_manager: BlitManager):\n\"\"\"Collection of DragPoints. Used to implement more complicated DragObjects.\n\n    Args:\n        dragpoints (list[DragPoint]): collection vertices.\n        blit_manager (BlitManager): used for automtic ploting.\n    \"\"\"\n\n    self.dragpoints = dragpoints\n    self.blit_manager = blit_manager\n\n    self.ax = blit_manager.ax\n    self.canvas = blit_manager.canvas\n\n    self.poly = Line2D(\n        self.get_xdata_display(),\n        self.get_ydata_display(),\n        linestyle='-',\n        color='red',\n        transform=None\n    )\n\n    self.patch = self.blit_manager.ax.add_patch(self.poly)  \n</code></pre>"},{"location":"reference/itfit/utils/collection/#itfit.utils.collection.DragPointCollection.get_xdata","title":"<code>get_xdata()</code>","text":"<p>Gets xdata from DragPoints in data coordinates.</p> <p>Returns:</p> Type Description <code>Tuple[float]</code> <p>x in data coordinates.</p> Source code in <code>itfit/utils/collection.py</code> <pre><code>def get_xdata(self):\n\"\"\"Gets xdata from DragPoints in data coordinates.\n\n    Returns:\n        (Tuple[float]):\n            x in data coordinates.\n    \"\"\"\n    return [self.get_xy(*p.get_center())[0] for p in self.dragpoints]\n</code></pre>"},{"location":"reference/itfit/utils/collection/#itfit.utils.collection.DragPointCollection.get_xdata_display","title":"<code>get_xdata_display()</code>","text":"<p>Gets xdata from DragPoints in display coordinates.</p> <p>Returns:</p> Type Description <code>Tuple[float]</code> <p>x in display coordinates.</p> Source code in <code>itfit/utils/collection.py</code> <pre><code>def get_xdata_display(self):\n\"\"\"Gets xdata from DragPoints in display coordinates.\n\n    Returns:\n        (Tuple[float]):\n            x in display coordinates.\n    \"\"\"\n\n    return [p.get_center()[0] for p in self.dragpoints]\n</code></pre>"},{"location":"reference/itfit/utils/collection/#itfit.utils.collection.DragPointCollection.get_xy","title":"<code>get_xy(*args)</code>","text":"<p>Applies and returns correct transformation from display to data coordinates.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <code>List[float, float] | List[List[float, float], ...]</code> <p>Coordinates from display.</p> <code>()</code> <p>Returns:</p> Type Description <code>Tuple[float, float] | Tuple[Tuple[float, float], ...]</code> <p>Coordinates from data.</p> Source code in <code>itfit/utils/collection.py</code> <pre><code>def get_xy(self, *args):\n\"\"\"Applies and returns correct transformation from display to data coordinates.\n\n    Parameters:\n        *args (List[float,float] | List[List[float,float],...]):\n            Coordinates from display.\n    Returns:\n        (Tuple[float,float] | Tuple[Tuple[float,float],...]):\n            Coordinates from data.\n    \"\"\"\n\n    args  = args if len(args)==2 else args[0]\n    return self.ax.transData.inverted().transform(args)\n</code></pre>"},{"location":"reference/itfit/utils/collection/#itfit.utils.collection.DragPointCollection.get_ydata","title":"<code>get_ydata()</code>","text":"<p>Gets ydata from DragPoints in data coordinates.</p> <p>Returns:</p> Type Description <code>Tuple[float]</code> <p>y in data coordinates.</p> Source code in <code>itfit/utils/collection.py</code> <pre><code>def get_ydata(self):\n\"\"\"Gets ydata from DragPoints in data coordinates.\n\n    Returns:\n        (Tuple[float]):\n            y in data coordinates.\n    \"\"\"\n    return [self.get_xy(*p.get_center())[1] for p in self.dragpoints]\n</code></pre>"},{"location":"reference/itfit/utils/collection/#itfit.utils.collection.DragPointCollection.get_ydata_display","title":"<code>get_ydata_display()</code>","text":"<p>Gets ydata from DragPoints in display coordinates.</p> <p>Returns:</p> Type Description <code>Tuple[float]</code> <p>y in display coordinates.</p> Source code in <code>itfit/utils/collection.py</code> <pre><code>def get_ydata_display(self):\n\"\"\"Gets ydata from DragPoints in display coordinates.\n\n    Returns:\n        (Tuple[float]):\n            y in display coordinates.\n    \"\"\"\n    return [p.get_center()[1] for p in self.dragpoints]\n</code></pre>"},{"location":"reference/itfit/utils/collection/#itfit.utils.collection.DragPointCollection.remove","title":"<code>remove()</code>","text":"<p>Removes the patch from the axes.</p> Source code in <code>itfit/utils/collection.py</code> <pre><code>def remove(self):\n\"\"\"Removes the patch from the axes.\"\"\"\n    self.patch.remove()\n</code></pre>"},{"location":"reference/itfit/utils/collection/#itfit.utils.collection.DragPointCollection.set_xy","title":"<code>set_xy(*args)</code>","text":"<p>Applies and returns correct transformation from data coordinates to display.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <code>List[float] | List[List[float, float]]</code> <p>Coordinates from data.</p> <code>()</code> <p>Returns:</p> Type Description <code>Tuple[float] | Tuple[Tuple[float, float]]</code> <p>Coordinates from display.</p> Source code in <code>itfit/utils/collection.py</code> <pre><code>def set_xy(self, *args):\n\"\"\"Applies and returns correct transformation from data coordinates to display.\n\n    Parameters:\n        *args (List[float] | List[List[float,float]]):\n            Coordinates from data.\n    Returns:\n        (Tuple[float] | Tuple[Tuple[float,float]]):\n            Coordinates from display.\n    \"\"\"\n    args  = args if len(args)==2 else args[0]\n    return self.ax.transData.transform(args)\n</code></pre>"},{"location":"reference/itfit/utils/exponential/","title":"Exponential","text":""},{"location":"reference/itfit/utils/exponential/#itfit.utils.exponential.DragExponentialManager","title":"<code>DragExponentialManager</code>","text":"<p>         Bases: <code>DragPointCollection</code></p> <p>Collection of DragPoints representing a straight line.</p> Source code in <code>itfit/utils/exponential.py</code> <pre><code>class DragExponentialManager(DragPointCollection):\n\"\"\"Collection of DragPoints representing a straight line.\"\"\"\n\n    @staticmethod \n    def function(x,a,b):\n\"\"\"Exponential function.\n\n        Parameters:\n            x (float):\n                independent variable.\n            a (float):\n                scales exponential function.\n            b (float):\n                scales x.\n\n        Returns:\n            (float):\n                `f(x) = a*exp(b*x)`\n        \"\"\"\n        return a*np.exp(b*x)\n\n    def __init__(self,dragpoints: list[DragPoint],blit_manager: BlitManager):\n\"\"\"Exponential line between 2 DragPoints. Updates with them.\n\n        Args:\n            dragpoints (list[DragPoint]): line vertices.\n            blit_manager (BlitManager): used for automatic ploting.\n        \"\"\" \n        super().__init__(dragpoints,blit_manager)\n        # name points based on use \n        self.point_1 = self.dragpoints[0]\n        self.point_2 = self.dragpoints[1]\n        self.update()\n\n    def update(self,*args,**kargs):\n\"\"\"Updates line data with DragObjects positions\"\"\"\n        p1_x, p2_x = self.get_xdata()\n        a,b = self.get_args()\n\n        #create x and y data of exponential line of an exponential that moves across two poitns\n        dx = abs(p1_x-p2_x) * 1.5 \n        x = np.linspace(min(p1_x,p2_x)-dx,max(p1_x,p2_x)+dx,250)\n        y = self.function(x, a, b)\n\n        # from data coordinates to display coordinates\n        xy = np.array((x,y)).T.reshape(-1,2)\n        x_data, y_data = self.set_xy(xy).T \n\n        #set new data\n        self.poly.set_xdata(x_data)\n        self.poly.set_ydata(y_data)\n\n    def get_args(self):\n\"\"\"Gives exponential function parameters.\n\n        Returns:\n            (Tuple[float,float]):\n                `a`, and `b` of `f(x) = a*exp(b*x)`\n        \"\"\" \n        p1_x, p1_y = self.get_xy(*self.point_1.patch.get_center())\n        p2_x, p2_y = self.get_xy(*self.point_2.patch.get_center())\n\n        b = 1/(p1_x - p2_x) * np.log(p1_y/p2_y)\n\n        a = p1_y / np.exp(b*p1_x)\n        return a, b \n</code></pre>"},{"location":"reference/itfit/utils/exponential/#itfit.utils.exponential.DragExponentialManager.__init__","title":"<code>__init__(dragpoints, blit_manager)</code>","text":"<p>Exponential line between 2 DragPoints. Updates with them.</p> <p>Parameters:</p> Name Type Description Default <code>dragpoints</code> <code>list[DragPoint]</code> <p>line vertices.</p> required <code>blit_manager</code> <code>BlitManager</code> <p>used for automatic ploting.</p> required Source code in <code>itfit/utils/exponential.py</code> <pre><code>def __init__(self,dragpoints: list[DragPoint],blit_manager: BlitManager):\n\"\"\"Exponential line between 2 DragPoints. Updates with them.\n\n    Args:\n        dragpoints (list[DragPoint]): line vertices.\n        blit_manager (BlitManager): used for automatic ploting.\n    \"\"\" \n    super().__init__(dragpoints,blit_manager)\n    # name points based on use \n    self.point_1 = self.dragpoints[0]\n    self.point_2 = self.dragpoints[1]\n    self.update()\n</code></pre>"},{"location":"reference/itfit/utils/exponential/#itfit.utils.exponential.DragExponentialManager.function","title":"<code>function(x, a, b)</code>  <code>staticmethod</code>","text":"<p>Exponential function.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>independent variable.</p> required <code>a</code> <code>float</code> <p>scales exponential function.</p> required <code>b</code> <code>float</code> <p>scales x.</p> required <p>Returns:</p> Type Description <code>float</code> <p><code>f(x) = a*exp(b*x)</code></p> Source code in <code>itfit/utils/exponential.py</code> <pre><code>@staticmethod \ndef function(x,a,b):\n\"\"\"Exponential function.\n\n    Parameters:\n        x (float):\n            independent variable.\n        a (float):\n            scales exponential function.\n        b (float):\n            scales x.\n\n    Returns:\n        (float):\n            `f(x) = a*exp(b*x)`\n    \"\"\"\n    return a*np.exp(b*x)\n</code></pre>"},{"location":"reference/itfit/utils/exponential/#itfit.utils.exponential.DragExponentialManager.get_args","title":"<code>get_args()</code>","text":"<p>Gives exponential function parameters.</p> <p>Returns:</p> Type Description <code>Tuple[float, float]</code> <p><code>a</code>, and <code>b</code> of <code>f(x) = a*exp(b*x)</code></p> Source code in <code>itfit/utils/exponential.py</code> <pre><code>def get_args(self):\n\"\"\"Gives exponential function parameters.\n\n    Returns:\n        (Tuple[float,float]):\n            `a`, and `b` of `f(x) = a*exp(b*x)`\n    \"\"\" \n    p1_x, p1_y = self.get_xy(*self.point_1.patch.get_center())\n    p2_x, p2_y = self.get_xy(*self.point_2.patch.get_center())\n\n    b = 1/(p1_x - p2_x) * np.log(p1_y/p2_y)\n\n    a = p1_y / np.exp(b*p1_x)\n    return a, b \n</code></pre>"},{"location":"reference/itfit/utils/exponential/#itfit.utils.exponential.DragExponentialManager.update","title":"<code>update(*args, **kargs)</code>","text":"<p>Updates line data with DragObjects positions</p> Source code in <code>itfit/utils/exponential.py</code> <pre><code>def update(self,*args,**kargs):\n\"\"\"Updates line data with DragObjects positions\"\"\"\n    p1_x, p2_x = self.get_xdata()\n    a,b = self.get_args()\n\n    #create x and y data of exponential line of an exponential that moves across two poitns\n    dx = abs(p1_x-p2_x) * 1.5 \n    x = np.linspace(min(p1_x,p2_x)-dx,max(p1_x,p2_x)+dx,250)\n    y = self.function(x, a, b)\n\n    # from data coordinates to display coordinates\n    xy = np.array((x,y)).T.reshape(-1,2)\n    x_data, y_data = self.set_xy(xy).T \n\n    #set new data\n    self.poly.set_xdata(x_data)\n    self.poly.set_ydata(y_data)\n</code></pre>"},{"location":"reference/itfit/utils/fit_container/","title":"Fit container","text":""},{"location":"reference/itfit/utils/fit_container/#itfit.utils.fit_container.FitResultContainer","title":"<code>FitResultContainer</code>","text":"Source code in <code>itfit/utils/fit_container.py</code> <pre><code>class FitResultContainer:\n    def __init__(self, data, fit_manager, scipy_result):\n\"\"\"_summary_\n\n        Parameters:\n            data (itfit.data.DataContainer):\n                Data fitted.\n            fit_manager (itfit.fit_functions.GenericFitter):\n                Fit function used\n            scipy_result (dict):\n                Dictionary of `scipy.optimize.curve_fit` output.\n        \"\"\"\n        self.data = data\n        self.function = fit_manager.function\n        self.fit_manager = fit_manager\n        self.scipy_output = {\n            \"popt\" : scipy_result[0],\n            \"pcov\" : scipy_result[1],\n            \"fvec\" : scipy_result[2][\"fvec\"],\n            \"nfev\" : scipy_result[2][\"nfev\"],\n            \"fjac\" : scipy_result[2][\"fjac\"],\n            \"ipvt\" : scipy_result[2][\"ipvt\"],\n            \"qtf\"  : scipy_result[2][\"qtf\"],\n            \"mesg\" : scipy_result[3],\n            \"ier\"  : scipy_result[4] \n        }\n\n    def get_parameters(self):\n\"\"\"Gets the optimal fitting parameters found.\n\n        Returns:\n            (Tuple[float]):\n                Tuple of parameters.\n        \"\"\"\n        return self.scipy_output[\"popt\"]\n\n    def get_parameters_covariance(self):\n\"\"\"Gets the parameters covariance matrix.\n\n        Returns:\n            (Ndarray(NxN)[float]):\n                Parameters covariance matrix.\n        \"\"\"\n        return self.scipy_output[\"pcov\"]\n\n    def get_parameters_errors(self):\n\"\"\"Gets the square root of diagonal elements of the covariance matrix.\n\n        Returns:\n            (Tuple[float]):\n                Optimal fitting parameters standard error.\n        \"\"\"\n        return np.sqrt(np.diag(self.get_parameters_covariance()))\n\n    def get_xdata(self):\n\"\"\"Gets the x component of the data used.\n\n        Returns:\n            (Tuple[float]):\n                X component of data used.\n        \"\"\"\n        return self.data.xdata\n\n    def get_ydata(self):\n\"\"\"Gets the y component of the data used.\n\n        Returns:\n            (Tuple[float]):\n                Y component of data used.\n        \"\"\"\n        return self.data.ydata\n\n    def get_data(self):\n\"\"\"Gets the data used.\n\n        Returns:\n            (Tuple[Tuple[float], Tuple[float]]):\n                Data used.\n        \"\"\"\n        return self.data.get_data()\n\n    def get_fit_xdata(self):\n\"\"\"Gets the x component of the fit curve. Equal to get_xdata output.\n\n        Returns:\n            (Tuple[float]):\n                X component of fit curve. Equal to get_xdata output.\n        \"\"\"\n        return self.get_xdata()\n\n    def get_fit_ydata(self):\n\"\"\"Gets the y coomponent of the fit curve.\n\n        Returns:\n            (Tuple[float]):\n                Y component of fit curve.\n        \"\"\"\n        return self.get_ydata() + self.scipy_output[\"fvec\"]\n\n    def get_fit_data(self):\n\"\"\"Gets the fit curve data.\n\n        Returns:\n            (Tuple[Tuple[float], Tuple[float]]):\n                Fit curve data.\n        \"\"\"\n        return np.array((self.get_fit_xdata(), self.get_fit_ydata())).T\n\n    def get_message(self):\n\"\"\"Gets scipy output `mesg` output.\n\n        Returns:\n            (str):\n                Scipy output message.\n        \"\"\"\n        return self.scipy_output[\"mesg\"]\n\n    def evaluate(self, x):\n\"\"\"Evaluates the given `x` in the fitting function with the optimal parameters.\n\n        Parameters:\n            x (float): \n                Independent variable.\n\n        Returns:\n            y (float): \n                Dependent variable.\n        \"\"\"\n        return self.function(x, *self.get_parameters())\n\n    def save(self, filename): # TODO:\n        ...\n\n    @classmethod    \n    def load(cls, filename): # TODO:\n        ...\n</code></pre>"},{"location":"reference/itfit/utils/fit_container/#itfit.utils.fit_container.FitResultContainer.__init__","title":"<code>__init__(data, fit_manager, scipy_result)</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>itfit.data.DataContainer</code> <p>Data fitted.</p> required <code>fit_manager</code> <code>itfit.fit_functions.GenericFitter</code> <p>Fit function used</p> required <code>scipy_result</code> <code>dict</code> <p>Dictionary of <code>scipy.optimize.curve_fit</code> output.</p> required Source code in <code>itfit/utils/fit_container.py</code> <pre><code>def __init__(self, data, fit_manager, scipy_result):\n\"\"\"_summary_\n\n    Parameters:\n        data (itfit.data.DataContainer):\n            Data fitted.\n        fit_manager (itfit.fit_functions.GenericFitter):\n            Fit function used\n        scipy_result (dict):\n            Dictionary of `scipy.optimize.curve_fit` output.\n    \"\"\"\n    self.data = data\n    self.function = fit_manager.function\n    self.fit_manager = fit_manager\n    self.scipy_output = {\n        \"popt\" : scipy_result[0],\n        \"pcov\" : scipy_result[1],\n        \"fvec\" : scipy_result[2][\"fvec\"],\n        \"nfev\" : scipy_result[2][\"nfev\"],\n        \"fjac\" : scipy_result[2][\"fjac\"],\n        \"ipvt\" : scipy_result[2][\"ipvt\"],\n        \"qtf\"  : scipy_result[2][\"qtf\"],\n        \"mesg\" : scipy_result[3],\n        \"ier\"  : scipy_result[4] \n    }\n</code></pre>"},{"location":"reference/itfit/utils/fit_container/#itfit.utils.fit_container.FitResultContainer.evaluate","title":"<code>evaluate(x)</code>","text":"<p>Evaluates the given <code>x</code> in the fitting function with the optimal parameters.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>Independent variable.</p> required <p>Returns:</p> Name Type Description <code>y</code> <code>float</code> <p>Dependent variable.</p> Source code in <code>itfit/utils/fit_container.py</code> <pre><code>def evaluate(self, x):\n\"\"\"Evaluates the given `x` in the fitting function with the optimal parameters.\n\n    Parameters:\n        x (float): \n            Independent variable.\n\n    Returns:\n        y (float): \n            Dependent variable.\n    \"\"\"\n    return self.function(x, *self.get_parameters())\n</code></pre>"},{"location":"reference/itfit/utils/fit_container/#itfit.utils.fit_container.FitResultContainer.get_data","title":"<code>get_data()</code>","text":"<p>Gets the data used.</p> <p>Returns:</p> Type Description <code>Tuple[Tuple[float], Tuple[float]]</code> <p>Data used.</p> Source code in <code>itfit/utils/fit_container.py</code> <pre><code>def get_data(self):\n\"\"\"Gets the data used.\n\n    Returns:\n        (Tuple[Tuple[float], Tuple[float]]):\n            Data used.\n    \"\"\"\n    return self.data.get_data()\n</code></pre>"},{"location":"reference/itfit/utils/fit_container/#itfit.utils.fit_container.FitResultContainer.get_fit_data","title":"<code>get_fit_data()</code>","text":"<p>Gets the fit curve data.</p> <p>Returns:</p> Type Description <code>Tuple[Tuple[float], Tuple[float]]</code> <p>Fit curve data.</p> Source code in <code>itfit/utils/fit_container.py</code> <pre><code>def get_fit_data(self):\n\"\"\"Gets the fit curve data.\n\n    Returns:\n        (Tuple[Tuple[float], Tuple[float]]):\n            Fit curve data.\n    \"\"\"\n    return np.array((self.get_fit_xdata(), self.get_fit_ydata())).T\n</code></pre>"},{"location":"reference/itfit/utils/fit_container/#itfit.utils.fit_container.FitResultContainer.get_fit_xdata","title":"<code>get_fit_xdata()</code>","text":"<p>Gets the x component of the fit curve. Equal to get_xdata output.</p> <p>Returns:</p> Type Description <code>Tuple[float]</code> <p>X component of fit curve. Equal to get_xdata output.</p> Source code in <code>itfit/utils/fit_container.py</code> <pre><code>def get_fit_xdata(self):\n\"\"\"Gets the x component of the fit curve. Equal to get_xdata output.\n\n    Returns:\n        (Tuple[float]):\n            X component of fit curve. Equal to get_xdata output.\n    \"\"\"\n    return self.get_xdata()\n</code></pre>"},{"location":"reference/itfit/utils/fit_container/#itfit.utils.fit_container.FitResultContainer.get_fit_ydata","title":"<code>get_fit_ydata()</code>","text":"<p>Gets the y coomponent of the fit curve.</p> <p>Returns:</p> Type Description <code>Tuple[float]</code> <p>Y component of fit curve.</p> Source code in <code>itfit/utils/fit_container.py</code> <pre><code>def get_fit_ydata(self):\n\"\"\"Gets the y coomponent of the fit curve.\n\n    Returns:\n        (Tuple[float]):\n            Y component of fit curve.\n    \"\"\"\n    return self.get_ydata() + self.scipy_output[\"fvec\"]\n</code></pre>"},{"location":"reference/itfit/utils/fit_container/#itfit.utils.fit_container.FitResultContainer.get_message","title":"<code>get_message()</code>","text":"<p>Gets scipy output <code>mesg</code> output.</p> <p>Returns:</p> Type Description <code>str</code> <p>Scipy output message.</p> Source code in <code>itfit/utils/fit_container.py</code> <pre><code>def get_message(self):\n\"\"\"Gets scipy output `mesg` output.\n\n    Returns:\n        (str):\n            Scipy output message.\n    \"\"\"\n    return self.scipy_output[\"mesg\"]\n</code></pre>"},{"location":"reference/itfit/utils/fit_container/#itfit.utils.fit_container.FitResultContainer.get_parameters","title":"<code>get_parameters()</code>","text":"<p>Gets the optimal fitting parameters found.</p> <p>Returns:</p> Type Description <code>Tuple[float]</code> <p>Tuple of parameters.</p> Source code in <code>itfit/utils/fit_container.py</code> <pre><code>def get_parameters(self):\n\"\"\"Gets the optimal fitting parameters found.\n\n    Returns:\n        (Tuple[float]):\n            Tuple of parameters.\n    \"\"\"\n    return self.scipy_output[\"popt\"]\n</code></pre>"},{"location":"reference/itfit/utils/fit_container/#itfit.utils.fit_container.FitResultContainer.get_parameters_covariance","title":"<code>get_parameters_covariance()</code>","text":"<p>Gets the parameters covariance matrix.</p> <p>Returns:</p> Type Description <code>Ndarray(NxN)[float]</code> <p>Parameters covariance matrix.</p> Source code in <code>itfit/utils/fit_container.py</code> <pre><code>def get_parameters_covariance(self):\n\"\"\"Gets the parameters covariance matrix.\n\n    Returns:\n        (Ndarray(NxN)[float]):\n            Parameters covariance matrix.\n    \"\"\"\n    return self.scipy_output[\"pcov\"]\n</code></pre>"},{"location":"reference/itfit/utils/fit_container/#itfit.utils.fit_container.FitResultContainer.get_parameters_errors","title":"<code>get_parameters_errors()</code>","text":"<p>Gets the square root of diagonal elements of the covariance matrix.</p> <p>Returns:</p> Type Description <code>Tuple[float]</code> <p>Optimal fitting parameters standard error.</p> Source code in <code>itfit/utils/fit_container.py</code> <pre><code>def get_parameters_errors(self):\n\"\"\"Gets the square root of diagonal elements of the covariance matrix.\n\n    Returns:\n        (Tuple[float]):\n            Optimal fitting parameters standard error.\n    \"\"\"\n    return np.sqrt(np.diag(self.get_parameters_covariance()))\n</code></pre>"},{"location":"reference/itfit/utils/fit_container/#itfit.utils.fit_container.FitResultContainer.get_xdata","title":"<code>get_xdata()</code>","text":"<p>Gets the x component of the data used.</p> <p>Returns:</p> Type Description <code>Tuple[float]</code> <p>X component of data used.</p> Source code in <code>itfit/utils/fit_container.py</code> <pre><code>def get_xdata(self):\n\"\"\"Gets the x component of the data used.\n\n    Returns:\n        (Tuple[float]):\n            X component of data used.\n    \"\"\"\n    return self.data.xdata\n</code></pre>"},{"location":"reference/itfit/utils/fit_container/#itfit.utils.fit_container.FitResultContainer.get_ydata","title":"<code>get_ydata()</code>","text":"<p>Gets the y component of the data used.</p> <p>Returns:</p> Type Description <code>Tuple[float]</code> <p>Y component of data used.</p> Source code in <code>itfit/utils/fit_container.py</code> <pre><code>def get_ydata(self):\n\"\"\"Gets the y component of the data used.\n\n    Returns:\n        (Tuple[float]):\n            Y component of data used.\n    \"\"\"\n    return self.data.ydata\n</code></pre>"},{"location":"reference/itfit/utils/gaussian/","title":"Gaussian","text":""},{"location":"reference/itfit/utils/gaussian/#itfit.utils.gaussian.DragGaussianManager","title":"<code>DragGaussianManager</code>","text":"<p>         Bases: <code>DragPointCollection</code></p> <p>Collection of DragPoints representing a Gaussian function.</p> Source code in <code>itfit/utils/gaussian.py</code> <pre><code>class DragGaussianManager(DragPointCollection):\n\"\"\"Collection of DragPoints representing a Gaussian function.\"\"\"\n\n    @staticmethod\n    def function(x,A,m,s):\n\"\"\"Gaussian function.\n\n        Parameters:\n            x (float):\n                independent variable.\n            A (float):\n                value at `x=m`.\n            m (float):\n                central point.\n            s (float):\n                sigma.\n\n        Returns:\n            (float):\n                `f(x) = A*exp(0.5*(x-m)^2 / s^2)`\n        \"\"\"\n        return A*np.exp(- 0.5 * (x - m)**2 / s**2)\n\n    def __init__(self,dragpoints: list[DragPoint],blit_manager: BlitManager):\n\"\"\"Gaussian line between 2 DragPoints. Updates with them.\n\n        Args:\n            dragpoints (list[DragPoint]): line vertices.\n            blit_manager (BlitManager): used for automatic ploting.\n        \"\"\"\n\n        super().__init__(dragpoints,blit_manager)\n        # name points based on use\n        self.peak = self.dragpoints[0]\n        self.side = self.dragpoints[1]\n        self.update()\n\n    def update(self,*args,**kargs):\n\"\"\"Updates line data with DragObjects positions\"\"\"\n\n        peak_x, side_x = self.get_xdata()\n        A,m,s = self.get_args()\n\n        #create x and y data of gaussian line of a gaussian that moves across two poitns\n        dx = abs(peak_x-side_x) * 1.5\n        x = np.linspace(min(peak_x,side_x)-dx,max(peak_x,side_x)+dx,250)\n        y = self.function(x,A,m,s)\n\n        #from data coordinates to display coordinates\n        xy = np.array((x,y)).T.reshape(-1,2)\n        x_data, y_data = self.set_xy(xy).T\n\n        #set new data\n        self.poly.set_xdata(x_data)\n        self.poly.set_ydata(y_data)\n\n    def get_args(self):\n\"\"\"Gives Gaussian function parameters.\n\n        Returns:\n            (Tuple[float, float, float]):\n                `A`, `m`, and `s` of `f(x) = A*exp(0.5*(x-m)^2 / s^2)`\n        \"\"\"\n        peak_x, peak_y = self.get_xy(*self.peak.patch.get_center())\n        side_x, side_y = self.get_xy(*self.side.patch.get_center())\n\n        if (peak_y &lt; side_y and peak_y &gt; 0) or \\\n           (peak_y &gt;= side_y and peak_y &lt; 0):\n                peak_x, peak_y = self.get_xy(*self.side.patch.get_center())\n                side_x, side_y = self.get_xy(*self.peak.patch.get_center())\n\n        m = peak_x\n        A = peak_y\n\n        #create a case for negative peaks\n        s =  abs(side_x-peak_x) * np.sqrt( 0.5 / np.log(abs(peak_y/side_y)) )\n\n        return A,m,s\n</code></pre>"},{"location":"reference/itfit/utils/gaussian/#itfit.utils.gaussian.DragGaussianManager.__init__","title":"<code>__init__(dragpoints, blit_manager)</code>","text":"<p>Gaussian line between 2 DragPoints. Updates with them.</p> <p>Parameters:</p> Name Type Description Default <code>dragpoints</code> <code>list[DragPoint]</code> <p>line vertices.</p> required <code>blit_manager</code> <code>BlitManager</code> <p>used for automatic ploting.</p> required Source code in <code>itfit/utils/gaussian.py</code> <pre><code>def __init__(self,dragpoints: list[DragPoint],blit_manager: BlitManager):\n\"\"\"Gaussian line between 2 DragPoints. Updates with them.\n\n    Args:\n        dragpoints (list[DragPoint]): line vertices.\n        blit_manager (BlitManager): used for automatic ploting.\n    \"\"\"\n\n    super().__init__(dragpoints,blit_manager)\n    # name points based on use\n    self.peak = self.dragpoints[0]\n    self.side = self.dragpoints[1]\n    self.update()\n</code></pre>"},{"location":"reference/itfit/utils/gaussian/#itfit.utils.gaussian.DragGaussianManager.function","title":"<code>function(x, A, m, s)</code>  <code>staticmethod</code>","text":"<p>Gaussian function.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>independent variable.</p> required <code>A</code> <code>float</code> <p>value at <code>x=m</code>.</p> required <code>m</code> <code>float</code> <p>central point.</p> required <code>s</code> <code>float</code> <p>sigma.</p> required <p>Returns:</p> Type Description <code>float</code> <p><code>f(x) = A*exp(0.5*(x-m)^2 / s^2)</code></p> Source code in <code>itfit/utils/gaussian.py</code> <pre><code>@staticmethod\ndef function(x,A,m,s):\n\"\"\"Gaussian function.\n\n    Parameters:\n        x (float):\n            independent variable.\n        A (float):\n            value at `x=m`.\n        m (float):\n            central point.\n        s (float):\n            sigma.\n\n    Returns:\n        (float):\n            `f(x) = A*exp(0.5*(x-m)^2 / s^2)`\n    \"\"\"\n    return A*np.exp(- 0.5 * (x - m)**2 / s**2)\n</code></pre>"},{"location":"reference/itfit/utils/gaussian/#itfit.utils.gaussian.DragGaussianManager.get_args","title":"<code>get_args()</code>","text":"<p>Gives Gaussian function parameters.</p> <p>Returns:</p> Type Description <code>Tuple[float, float, float]</code> <p><code>A</code>, <code>m</code>, and <code>s</code> of <code>f(x) = A*exp(0.5*(x-m)^2 / s^2)</code></p> Source code in <code>itfit/utils/gaussian.py</code> <pre><code>def get_args(self):\n\"\"\"Gives Gaussian function parameters.\n\n    Returns:\n        (Tuple[float, float, float]):\n            `A`, `m`, and `s` of `f(x) = A*exp(0.5*(x-m)^2 / s^2)`\n    \"\"\"\n    peak_x, peak_y = self.get_xy(*self.peak.patch.get_center())\n    side_x, side_y = self.get_xy(*self.side.patch.get_center())\n\n    if (peak_y &lt; side_y and peak_y &gt; 0) or \\\n       (peak_y &gt;= side_y and peak_y &lt; 0):\n            peak_x, peak_y = self.get_xy(*self.side.patch.get_center())\n            side_x, side_y = self.get_xy(*self.peak.patch.get_center())\n\n    m = peak_x\n    A = peak_y\n\n    #create a case for negative peaks\n    s =  abs(side_x-peak_x) * np.sqrt( 0.5 / np.log(abs(peak_y/side_y)) )\n\n    return A,m,s\n</code></pre>"},{"location":"reference/itfit/utils/gaussian/#itfit.utils.gaussian.DragGaussianManager.update","title":"<code>update(*args, **kargs)</code>","text":"<p>Updates line data with DragObjects positions</p> Source code in <code>itfit/utils/gaussian.py</code> <pre><code>def update(self,*args,**kargs):\n\"\"\"Updates line data with DragObjects positions\"\"\"\n\n    peak_x, side_x = self.get_xdata()\n    A,m,s = self.get_args()\n\n    #create x and y data of gaussian line of a gaussian that moves across two poitns\n    dx = abs(peak_x-side_x) * 1.5\n    x = np.linspace(min(peak_x,side_x)-dx,max(peak_x,side_x)+dx,250)\n    y = self.function(x,A,m,s)\n\n    #from data coordinates to display coordinates\n    xy = np.array((x,y)).T.reshape(-1,2)\n    x_data, y_data = self.set_xy(xy).T\n\n    #set new data\n    self.poly.set_xdata(x_data)\n    self.poly.set_ydata(y_data)\n</code></pre>"},{"location":"reference/itfit/utils/line/","title":"Line","text":""},{"location":"reference/itfit/utils/line/#itfit.utils.line.DragLineManager","title":"<code>DragLineManager</code>","text":"<p>         Bases: <code>DragPointCollection</code></p> <p>Collection of DragPoints representing a straight line.</p> Source code in <code>itfit/utils/line.py</code> <pre><code>class DragLineManager(DragPointCollection):\n\"\"\"Collection of DragPoints representing a straight line.\"\"\"\n\n    @staticmethod\n    def function(x, m, n):\n\"\"\"Straight line function.\n\n        Parameters:\n            x (float):\n                independent variable.\n            m (float):\n                slope.\n            n (float):\n                value at `x=0`.\n\n        Returns:\n            (float):\n                `f(x) = m*x+n`\n        \"\"\"\n        return m*x + n\n\n    def __init__(self, dragpoints: list[DragPoint], blit_manager: BlitManager):\n\"\"\"Line between multiple DragPoints. Updates with them.\n\n        Parameters:\n            dragpoints (list[DragPoint]): line vertices.\n            blit_manager (BlitManager): used for automtic ploting.\n        \"\"\"\n        super().__init__(dragpoints, blit_manager)\n        self.update()\n\n    def update(self, *args, **kargs):\n\"\"\"Updates line data with DragObjects positions\"\"\"\n        x0, x1 = self.get_xdata()\n        m, n = self.get_args()\n\n        if (m,n) == (0,0):\n            self.poly.set_xdata(self.get_xdata_display())\n            self.poly.set_ydata(self.get_ydata_display())\n\n        # create x and y data\n        dx = abs(x0-x1)*0.5\n        x = np.linspace(min(x0,x1)-dx, max(x0,x1)+dx, 250)\n        y = self.function(x, m, n)\n\n        # from data coordinates to display coordinates\n        xy = np.array((x,y)).T.reshape(-1, 2)\n        x_data, y_data = self.set_xy(xy).T\n\n        # set new data\n        self.poly.set_xdata(x_data)\n        self.poly.set_ydata(y_data)\n\n    def get_args(self):\n\"\"\"Gives linear function parameters.\n\n        Returns:\n            (Tuple[float, float]):\n                `m` and `n` of `f(x)=m*x + n`.\n        \"\"\"\n        x0, x1 = self.get_xdata()\n        y0, y1 = self.get_ydata()\n\n        if (x1-x0)==0:\n            return 0.,0.\n        m:float = (y1 - y0)/(x1 - x0)\n        n:float = m*(-x1)+y1\n        return m, n\n</code></pre>"},{"location":"reference/itfit/utils/line/#itfit.utils.line.DragLineManager.__init__","title":"<code>__init__(dragpoints, blit_manager)</code>","text":"<p>Line between multiple DragPoints. Updates with them.</p> <p>Parameters:</p> Name Type Description Default <code>dragpoints</code> <code>list[DragPoint]</code> <p>line vertices.</p> required <code>blit_manager</code> <code>BlitManager</code> <p>used for automtic ploting.</p> required Source code in <code>itfit/utils/line.py</code> <pre><code>def __init__(self, dragpoints: list[DragPoint], blit_manager: BlitManager):\n\"\"\"Line between multiple DragPoints. Updates with them.\n\n    Parameters:\n        dragpoints (list[DragPoint]): line vertices.\n        blit_manager (BlitManager): used for automtic ploting.\n    \"\"\"\n    super().__init__(dragpoints, blit_manager)\n    self.update()\n</code></pre>"},{"location":"reference/itfit/utils/line/#itfit.utils.line.DragLineManager.function","title":"<code>function(x, m, n)</code>  <code>staticmethod</code>","text":"<p>Straight line function.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>independent variable.</p> required <code>m</code> <code>float</code> <p>slope.</p> required <code>n</code> <code>float</code> <p>value at <code>x=0</code>.</p> required <p>Returns:</p> Type Description <code>float</code> <p><code>f(x) = m*x+n</code></p> Source code in <code>itfit/utils/line.py</code> <pre><code>@staticmethod\ndef function(x, m, n):\n\"\"\"Straight line function.\n\n    Parameters:\n        x (float):\n            independent variable.\n        m (float):\n            slope.\n        n (float):\n            value at `x=0`.\n\n    Returns:\n        (float):\n            `f(x) = m*x+n`\n    \"\"\"\n    return m*x + n\n</code></pre>"},{"location":"reference/itfit/utils/line/#itfit.utils.line.DragLineManager.get_args","title":"<code>get_args()</code>","text":"<p>Gives linear function parameters.</p> <p>Returns:</p> Type Description <code>Tuple[float, float]</code> <p><code>m</code> and <code>n</code> of <code>f(x)=m*x + n</code>.</p> Source code in <code>itfit/utils/line.py</code> <pre><code>def get_args(self):\n\"\"\"Gives linear function parameters.\n\n    Returns:\n        (Tuple[float, float]):\n            `m` and `n` of `f(x)=m*x + n`.\n    \"\"\"\n    x0, x1 = self.get_xdata()\n    y0, y1 = self.get_ydata()\n\n    if (x1-x0)==0:\n        return 0.,0.\n    m:float = (y1 - y0)/(x1 - x0)\n    n:float = m*(-x1)+y1\n    return m, n\n</code></pre>"},{"location":"reference/itfit/utils/line/#itfit.utils.line.DragLineManager.update","title":"<code>update(*args, **kargs)</code>","text":"<p>Updates line data with DragObjects positions</p> Source code in <code>itfit/utils/line.py</code> <pre><code>def update(self, *args, **kargs):\n\"\"\"Updates line data with DragObjects positions\"\"\"\n    x0, x1 = self.get_xdata()\n    m, n = self.get_args()\n\n    if (m,n) == (0,0):\n        self.poly.set_xdata(self.get_xdata_display())\n        self.poly.set_ydata(self.get_ydata_display())\n\n    # create x and y data\n    dx = abs(x0-x1)*0.5\n    x = np.linspace(min(x0,x1)-dx, max(x0,x1)+dx, 250)\n    y = self.function(x, m, n)\n\n    # from data coordinates to display coordinates\n    xy = np.array((x,y)).T.reshape(-1, 2)\n    x_data, y_data = self.set_xy(xy).T\n\n    # set new data\n    self.poly.set_xdata(x_data)\n    self.poly.set_ydata(y_data)\n</code></pre>"},{"location":"reference/itfit/utils/lorentzian/","title":"Lorentzian","text":""},{"location":"reference/itfit/utils/lorentzian/#itfit.utils.lorentzian.DragLorentzianManager","title":"<code>DragLorentzianManager</code>","text":"<p>         Bases: <code>DragPointCollection</code></p> Source code in <code>itfit/utils/lorentzian.py</code> <pre><code>class DragLorentzianManager(DragPointCollection):\n    @staticmethod\n    def function(x,A,x0,FWHM):\n        return A/np.pi*(FWHM/2)/((x-x0)**2+(FWHM/2)**2)\n\n    def __init__(self,dragpoints: list[DragPoint],blit_manager: BlitManager):\n\"\"\"Lorentzian line between 2 DragPoints. Updates with them.\n\n        Args:\n            dragpoints (list[DragPoint]): line vertices.\n            blit_manager (BlitManager): used for automatic ploting.\n        \"\"\"\n\n        super().__init__(dragpoints,blit_manager)\n        # name points based on use\n        self.peak = self.dragpoints[0]\n        self.side = self.dragpoints[1]\n        self.update()\n\n    def update(self,*args,**kargs):\n\"\"\"Updates line data with DragObjects positions\"\"\"\n\n        peak_x, side_x = self.get_xdata()\n        A,x0,FWHM = self.get_args()\n\n        #create x and y data of Lorentzian line of a Lorentzian that moves across two points\n        dx = abs(peak_x-side_x) * 1.5\n        x = np.linspace(min(peak_x,side_x)-dx,max(peak_x,side_x)+dx,250)\n        y = self.function(x,A,x0,FWHM)\n\n        #from data coordinates to display coordinates\n        xy = np.array((x,y)).T.reshape(-1,2)\n        x_data, y_data = self.set_xy(xy).T\n\n        #set new data\n        self.poly.set_xdata(x_data)\n        self.poly.set_ydata(y_data)\n\n    def get_args(self):\n\"\"\"Gives Lorentzian function parameters.\n\n        Returns:\n            (tuple[float,float,float]): `A`, `x0`, and `FWHM` of `f(x) = A/pi*(FWHM/2)/((x-x0)^2+(FWHM/2)^2)`.\n        \"\"\"\n        peak_x, peak_y = self.get_xy(*self.peak.patch.get_center())\n        side_x, side_y = self.get_xy(*self.side.patch.get_center())\n\n        if (peak_y &lt; side_y and peak_y &gt; 0) or \\\n           (peak_y &gt;= side_y and peak_y &lt; 0):\n                peak_x, peak_y = self.get_xy(*self.side.patch.get_center())\n                side_x, side_y = self.get_xy(*self.peak.patch.get_center())\n\n        x0 = peak_x\n        FWHM = 2*abs(peak_x-side_x)\n        A = peak_y*FWHM/2*np.pi\n\n\n        return A,x0,FWHM\n</code></pre>"},{"location":"reference/itfit/utils/lorentzian/#itfit.utils.lorentzian.DragLorentzianManager.__init__","title":"<code>__init__(dragpoints, blit_manager)</code>","text":"<p>Lorentzian line between 2 DragPoints. Updates with them.</p> <p>Parameters:</p> Name Type Description Default <code>dragpoints</code> <code>list[DragPoint]</code> <p>line vertices.</p> required <code>blit_manager</code> <code>BlitManager</code> <p>used for automatic ploting.</p> required Source code in <code>itfit/utils/lorentzian.py</code> <pre><code>def __init__(self,dragpoints: list[DragPoint],blit_manager: BlitManager):\n\"\"\"Lorentzian line between 2 DragPoints. Updates with them.\n\n    Args:\n        dragpoints (list[DragPoint]): line vertices.\n        blit_manager (BlitManager): used for automatic ploting.\n    \"\"\"\n\n    super().__init__(dragpoints,blit_manager)\n    # name points based on use\n    self.peak = self.dragpoints[0]\n    self.side = self.dragpoints[1]\n    self.update()\n</code></pre>"},{"location":"reference/itfit/utils/lorentzian/#itfit.utils.lorentzian.DragLorentzianManager.get_args","title":"<code>get_args()</code>","text":"<p>Gives Lorentzian function parameters.</p> <p>Returns:</p> Type Description <code>tuple[float, float, float]</code> <p><code>A</code>, <code>x0</code>, and <code>FWHM</code> of <code>f(x) = A/pi*(FWHM/2)/((x-x0)^2+(FWHM/2)^2)</code>.</p> Source code in <code>itfit/utils/lorentzian.py</code> <pre><code>def get_args(self):\n\"\"\"Gives Lorentzian function parameters.\n\n    Returns:\n        (tuple[float,float,float]): `A`, `x0`, and `FWHM` of `f(x) = A/pi*(FWHM/2)/((x-x0)^2+(FWHM/2)^2)`.\n    \"\"\"\n    peak_x, peak_y = self.get_xy(*self.peak.patch.get_center())\n    side_x, side_y = self.get_xy(*self.side.patch.get_center())\n\n    if (peak_y &lt; side_y and peak_y &gt; 0) or \\\n       (peak_y &gt;= side_y and peak_y &lt; 0):\n            peak_x, peak_y = self.get_xy(*self.side.patch.get_center())\n            side_x, side_y = self.get_xy(*self.peak.patch.get_center())\n\n    x0 = peak_x\n    FWHM = 2*abs(peak_x-side_x)\n    A = peak_y*FWHM/2*np.pi\n\n\n    return A,x0,FWHM\n</code></pre>"},{"location":"reference/itfit/utils/lorentzian/#itfit.utils.lorentzian.DragLorentzianManager.update","title":"<code>update(*args, **kargs)</code>","text":"<p>Updates line data with DragObjects positions</p> Source code in <code>itfit/utils/lorentzian.py</code> <pre><code>def update(self,*args,**kargs):\n\"\"\"Updates line data with DragObjects positions\"\"\"\n\n    peak_x, side_x = self.get_xdata()\n    A,x0,FWHM = self.get_args()\n\n    #create x and y data of Lorentzian line of a Lorentzian that moves across two points\n    dx = abs(peak_x-side_x) * 1.5\n    x = np.linspace(min(peak_x,side_x)-dx,max(peak_x,side_x)+dx,250)\n    y = self.function(x,A,x0,FWHM)\n\n    #from data coordinates to display coordinates\n    xy = np.array((x,y)).T.reshape(-1,2)\n    x_data, y_data = self.set_xy(xy).T\n\n    #set new data\n    self.poly.set_xdata(x_data)\n    self.poly.set_ydata(y_data)\n</code></pre>"},{"location":"reference/itfit/utils/point/","title":"Point","text":""},{"location":"reference/itfit/utils/point/#itfit.utils.point.DragPoint","title":"<code>DragPoint</code>","text":"<p>Data containter for draggable points. In the future it may support form, size and colour change.</p> Source code in <code>itfit/utils/point.py</code> <pre><code>class DragPoint:\n\"\"\"Data containter for draggable points. In the future it may support form, size and colour change.\n    \"\"\"\n    def __init__(self, x, y, style, *args):\n\"\"\"Creates a patch in given display coordinates.\n\n        Parameters:\n            x (float):\n                y position in display units (between 0 and 1).\n            y (float):\n                y position in display units (between 0 and 1).\n            style : Any\n                No used.\n        \"\"\"\n        self._style = style\n        self.restriction_callback = lambda x,y: (x,y)\n        self.patch = Circle(np.array([x,y]), 10)\n\n    def get_center(self):\n\"\"\"Returns the center position in display coordinates.\n\n        Returns:\n            (Tuple[float,float]):\n                Center in display coordinates.\n        \"\"\"\n        return self.restriction_callback(*self.patch.get_center())\n\n    def remove(self):\n\"\"\"Removes the point from the figure.\"\"\"\n        self.patch.remove()\n</code></pre>"},{"location":"reference/itfit/utils/point/#itfit.utils.point.DragPoint.__init__","title":"<code>__init__(x, y, style, *args)</code>","text":"<p>Creates a patch in given display coordinates.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>y position in display units (between 0 and 1).</p> required <code>y</code> <code>float</code> <p>y position in display units (between 0 and 1).</p> required <code>style</code> <p>Any No used.</p> required Source code in <code>itfit/utils/point.py</code> <pre><code>def __init__(self, x, y, style, *args):\n\"\"\"Creates a patch in given display coordinates.\n\n    Parameters:\n        x (float):\n            y position in display units (between 0 and 1).\n        y (float):\n            y position in display units (between 0 and 1).\n        style : Any\n            No used.\n    \"\"\"\n    self._style = style\n    self.restriction_callback = lambda x,y: (x,y)\n    self.patch = Circle(np.array([x,y]), 10)\n</code></pre>"},{"location":"reference/itfit/utils/point/#itfit.utils.point.DragPoint.get_center","title":"<code>get_center()</code>","text":"<p>Returns the center position in display coordinates.</p> <p>Returns:</p> Type Description <code>Tuple[float, float]</code> <p>Center in display coordinates.</p> Source code in <code>itfit/utils/point.py</code> <pre><code>def get_center(self):\n\"\"\"Returns the center position in display coordinates.\n\n    Returns:\n        (Tuple[float,float]):\n            Center in display coordinates.\n    \"\"\"\n    return self.restriction_callback(*self.patch.get_center())\n</code></pre>"},{"location":"reference/itfit/utils/point/#itfit.utils.point.DragPoint.remove","title":"<code>remove()</code>","text":"<p>Removes the point from the figure.</p> Source code in <code>itfit/utils/point.py</code> <pre><code>def remove(self):\n\"\"\"Removes the point from the figure.\"\"\"\n    self.patch.remove()\n</code></pre>"},{"location":"reference/itfit/utils/point/#itfit.utils.point.DragPointManager","title":"<code>DragPointManager</code>","text":"<p>Manages <code>DragPoints</code>: event connection, automatic replotting on change/update, blitting and restrictions.</p> Source code in <code>itfit/utils/point.py</code> <pre><code>class DragPointManager:\n\"\"\"Manages `DragPoints`: event connection, automatic replotting on change/update, blitting and restrictions.\n    \"\"\"\n    def __init__(self, dragpoint: DragPoint, blit_manager):\n\"\"\"Manages a DragPoint's BlitManager connection, callbacks on matplotlib events and automatic drawing.\n\n        Parameters:\n            dragpoint (DragPoint): contains patch.\n            blit_manager (BlitManager): used for automtic ploting.\n        \"\"\"\n        self.dragpoint = dragpoint\n        self.blit_manager = blit_manager\n\n        self.ax = blit_manager.ax\n        self.canvas = blit_manager.canvas\n\n        self.dragpoint.patch.set_transform(None)\n        self.blit_manager.ax.add_patch(self.dragpoint.patch)\n\n        self.poly = self.dragpoint.patch\n        self.connection_callbacks = {}\n        self.restricction_callback = lambda x,y: (x,y)\n\n        self.canvas.mpl_connect('button_press_event', self.on_button_press)\n        self.canvas.mpl_connect('key_press_event', self.on_key_press)\n        self.canvas.mpl_connect('button_release_event', self.on_button_release)\n        self.canvas.mpl_connect('motion_notify_event', self.on_mouse_move)\n\n        self._ind = None # Used for enabling mouse motion.\n\n    def connect(self, function):\n\"\"\"Connects a callback for change envents. \n\n        Parameters:\n            function (callable):\n                Function to be executed when the DragPoint updates. Must have signature `def f(event)`.    \n        Returns:\n            (Int):\n                Connection id. Can be used in `DragPointManager.disconnect`.\n        \"\"\"\n        cin = np.random.randint(1000000)\n        self.connection_callbacks.update({cin: function})\n        return cin\n\n    def disconnect(self, cid):\n\"\"\"Disconnects the callback with given `cid`.\n\n        Parameters:\n            cid (Int):\n                Connection id.\n        \"\"\"\n\n        if cid in self.connection_callbacks.keys():\n            self.connection_callbacks.pop(cid)\n\n    def add_restriction(self, function):\n\"\"\"Adds a restriction to point movement. \n\n        Parameters:\n            function (callable):\n                Must have signature `def f(new_x,new_y): -&gt; Tuple[float, float]`\n        \"\"\"\n        self.restricction_callback = function\n        self.dragpoint.restriction_callback = self.restricction_callback\n\n    def remove_restriction(self):\n\"\"\"Removes the restriction to point movement\"\"\"\n        self.restricction_callback = lambda x,y:(x,y)\n        self.dragpoint.restriction_callback = self.restricction_callback\n\n    def get_xy(self, x, y):\n\"\"\"Applies correct transformation from display to data coordinates.\n\n        Parameters:\n            x (float):\n                x in display coordinates.\n            y (float):\n                y in display coordinates.  \n        Returns:\n            (Tuple[float,float]):\n                x and y in data coordinates.\n        \"\"\"\n        return self.ax.transData.inverted().transform((x,y))\n\n    def set_xy(self, x, y):\n\"\"\"Applies correct transformation from data coordinates to display\n\n        Parameters:\n            x (float): \n                x in data coordinates.\n            y (float):\n                y in data coordinates.\n        Returns:\n            (Tuple[float,float]):\n                x and y in display coordinates.\n        \"\"\"\n        return self.ax.transData.transform((x,y))\n\n    def on_button_press(self, event):\n\"\"\"Callback for mouse button presses\"\"\"\n        if event.inaxes is None:\n            return\n        if event.button != 1:\n            return\n\n        x, y = event.xdata, event.ydata\n        x, y = self.set_xy(x, y)\n        if np.hypot(*(self.poly.center - np.array([x,y]))) &lt; 1.5*self.poly.get_radius():\n            self._ind = 0\n\n    def on_button_release(self, event):\n\"\"\"Callback for mouse button releases\"\"\"\n        if event.button != 1:\n            return\n        self._ind = None\n\n    def on_key_press(self, event):\n\"\"\"Callback for key presses\"\"\"\n        #! This may be useful later.\n        if not event.inaxes:\n            return\n\n    def on_mouse_move(self, event):\n\"\"\"Callback for mouse movements\"\"\"\n        if self._ind is None:\n            return\n        if event.inaxes is None:\n            return\n        if event.button != 1:\n            return\n        x, y = event.xdata, event.ydata\n        x, y = self.restricction_callback(x, y)\n        x, y = self.set_xy(x, y)\n\n        prop = {'center': np.array([x,y])}\n        Artist.update(self.poly, prop)\n        for k,v in self.connection_callbacks.items():\n            v(x,y)\n\n        self.blit_manager.draw()\n</code></pre>"},{"location":"reference/itfit/utils/point/#itfit.utils.point.DragPointManager.__init__","title":"<code>__init__(dragpoint, blit_manager)</code>","text":"<p>Manages a DragPoint's BlitManager connection, callbacks on matplotlib events and automatic drawing.</p> <p>Parameters:</p> Name Type Description Default <code>dragpoint</code> <code>DragPoint</code> <p>contains patch.</p> required <code>blit_manager</code> <code>BlitManager</code> <p>used for automtic ploting.</p> required Source code in <code>itfit/utils/point.py</code> <pre><code>def __init__(self, dragpoint: DragPoint, blit_manager):\n\"\"\"Manages a DragPoint's BlitManager connection, callbacks on matplotlib events and automatic drawing.\n\n    Parameters:\n        dragpoint (DragPoint): contains patch.\n        blit_manager (BlitManager): used for automtic ploting.\n    \"\"\"\n    self.dragpoint = dragpoint\n    self.blit_manager = blit_manager\n\n    self.ax = blit_manager.ax\n    self.canvas = blit_manager.canvas\n\n    self.dragpoint.patch.set_transform(None)\n    self.blit_manager.ax.add_patch(self.dragpoint.patch)\n\n    self.poly = self.dragpoint.patch\n    self.connection_callbacks = {}\n    self.restricction_callback = lambda x,y: (x,y)\n\n    self.canvas.mpl_connect('button_press_event', self.on_button_press)\n    self.canvas.mpl_connect('key_press_event', self.on_key_press)\n    self.canvas.mpl_connect('button_release_event', self.on_button_release)\n    self.canvas.mpl_connect('motion_notify_event', self.on_mouse_move)\n\n    self._ind = None # Used for enabling mouse motion.\n</code></pre>"},{"location":"reference/itfit/utils/point/#itfit.utils.point.DragPointManager.add_restriction","title":"<code>add_restriction(function)</code>","text":"<p>Adds a restriction to point movement. </p> <p>Parameters:</p> Name Type Description Default <code>function</code> <code>callable</code> <p>Must have signature <code>def f(new_x,new_y): -&gt; Tuple[float, float]</code></p> required Source code in <code>itfit/utils/point.py</code> <pre><code>def add_restriction(self, function):\n\"\"\"Adds a restriction to point movement. \n\n    Parameters:\n        function (callable):\n            Must have signature `def f(new_x,new_y): -&gt; Tuple[float, float]`\n    \"\"\"\n    self.restricction_callback = function\n    self.dragpoint.restriction_callback = self.restricction_callback\n</code></pre>"},{"location":"reference/itfit/utils/point/#itfit.utils.point.DragPointManager.connect","title":"<code>connect(function)</code>","text":"<p>Connects a callback for change envents. </p> <p>Parameters:</p> Name Type Description Default <code>function</code> <code>callable</code> <p>Function to be executed when the DragPoint updates. Must have signature <code>def f(event)</code>.    </p> required <p>Returns:</p> Type Description <code>Int</code> <p>Connection id. Can be used in <code>DragPointManager.disconnect</code>.</p> Source code in <code>itfit/utils/point.py</code> <pre><code>def connect(self, function):\n\"\"\"Connects a callback for change envents. \n\n    Parameters:\n        function (callable):\n            Function to be executed when the DragPoint updates. Must have signature `def f(event)`.    \n    Returns:\n        (Int):\n            Connection id. Can be used in `DragPointManager.disconnect`.\n    \"\"\"\n    cin = np.random.randint(1000000)\n    self.connection_callbacks.update({cin: function})\n    return cin\n</code></pre>"},{"location":"reference/itfit/utils/point/#itfit.utils.point.DragPointManager.disconnect","title":"<code>disconnect(cid)</code>","text":"<p>Disconnects the callback with given <code>cid</code>.</p> <p>Parameters:</p> Name Type Description Default <code>cid</code> <code>Int</code> <p>Connection id.</p> required Source code in <code>itfit/utils/point.py</code> <pre><code>def disconnect(self, cid):\n\"\"\"Disconnects the callback with given `cid`.\n\n    Parameters:\n        cid (Int):\n            Connection id.\n    \"\"\"\n\n    if cid in self.connection_callbacks.keys():\n        self.connection_callbacks.pop(cid)\n</code></pre>"},{"location":"reference/itfit/utils/point/#itfit.utils.point.DragPointManager.get_xy","title":"<code>get_xy(x, y)</code>","text":"<p>Applies correct transformation from display to data coordinates.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>x in display coordinates.</p> required <code>y</code> <code>float</code> <p>y in display coordinates.  </p> required <p>Returns:</p> Type Description <code>Tuple[float, float]</code> <p>x and y in data coordinates.</p> Source code in <code>itfit/utils/point.py</code> <pre><code>def get_xy(self, x, y):\n\"\"\"Applies correct transformation from display to data coordinates.\n\n    Parameters:\n        x (float):\n            x in display coordinates.\n        y (float):\n            y in display coordinates.  \n    Returns:\n        (Tuple[float,float]):\n            x and y in data coordinates.\n    \"\"\"\n    return self.ax.transData.inverted().transform((x,y))\n</code></pre>"},{"location":"reference/itfit/utils/point/#itfit.utils.point.DragPointManager.on_button_press","title":"<code>on_button_press(event)</code>","text":"<p>Callback for mouse button presses</p> Source code in <code>itfit/utils/point.py</code> <pre><code>def on_button_press(self, event):\n\"\"\"Callback for mouse button presses\"\"\"\n    if event.inaxes is None:\n        return\n    if event.button != 1:\n        return\n\n    x, y = event.xdata, event.ydata\n    x, y = self.set_xy(x, y)\n    if np.hypot(*(self.poly.center - np.array([x,y]))) &lt; 1.5*self.poly.get_radius():\n        self._ind = 0\n</code></pre>"},{"location":"reference/itfit/utils/point/#itfit.utils.point.DragPointManager.on_button_release","title":"<code>on_button_release(event)</code>","text":"<p>Callback for mouse button releases</p> Source code in <code>itfit/utils/point.py</code> <pre><code>def on_button_release(self, event):\n\"\"\"Callback for mouse button releases\"\"\"\n    if event.button != 1:\n        return\n    self._ind = None\n</code></pre>"},{"location":"reference/itfit/utils/point/#itfit.utils.point.DragPointManager.on_key_press","title":"<code>on_key_press(event)</code>","text":"<p>Callback for key presses</p> Source code in <code>itfit/utils/point.py</code> <pre><code>def on_key_press(self, event):\n\"\"\"Callback for key presses\"\"\"\n    #! This may be useful later.\n    if not event.inaxes:\n        return\n</code></pre>"},{"location":"reference/itfit/utils/point/#itfit.utils.point.DragPointManager.on_mouse_move","title":"<code>on_mouse_move(event)</code>","text":"<p>Callback for mouse movements</p> Source code in <code>itfit/utils/point.py</code> <pre><code>def on_mouse_move(self, event):\n\"\"\"Callback for mouse movements\"\"\"\n    if self._ind is None:\n        return\n    if event.inaxes is None:\n        return\n    if event.button != 1:\n        return\n    x, y = event.xdata, event.ydata\n    x, y = self.restricction_callback(x, y)\n    x, y = self.set_xy(x, y)\n\n    prop = {'center': np.array([x,y])}\n    Artist.update(self.poly, prop)\n    for k,v in self.connection_callbacks.items():\n        v(x,y)\n\n    self.blit_manager.draw()\n</code></pre>"},{"location":"reference/itfit/utils/point/#itfit.utils.point.DragPointManager.remove_restriction","title":"<code>remove_restriction()</code>","text":"<p>Removes the restriction to point movement</p> Source code in <code>itfit/utils/point.py</code> <pre><code>def remove_restriction(self):\n\"\"\"Removes the restriction to point movement\"\"\"\n    self.restricction_callback = lambda x,y:(x,y)\n    self.dragpoint.restriction_callback = self.restricction_callback\n</code></pre>"},{"location":"reference/itfit/utils/point/#itfit.utils.point.DragPointManager.set_xy","title":"<code>set_xy(x, y)</code>","text":"<p>Applies correct transformation from data coordinates to display</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>x in data coordinates.</p> required <code>y</code> <code>float</code> <p>y in data coordinates.</p> required <p>Returns:</p> Type Description <code>Tuple[float, float]</code> <p>x and y in display coordinates.</p> Source code in <code>itfit/utils/point.py</code> <pre><code>def set_xy(self, x, y):\n\"\"\"Applies correct transformation from data coordinates to display\n\n    Parameters:\n        x (float): \n            x in data coordinates.\n        y (float):\n            y in data coordinates.\n    Returns:\n        (Tuple[float,float]):\n            x and y in display coordinates.\n    \"\"\"\n    return self.ax.transData.transform((x,y))\n</code></pre>"},{"location":"reference/itfit/utils/quadratic/","title":"Quadratic","text":""},{"location":"reference/itfit/utils/quadratic/#itfit.utils.quadratic.DragQuadraticManager","title":"<code>DragQuadraticManager</code>","text":"<p>         Bases: <code>DragPointCollection</code></p> <p>Collection of DragPoints representing a quadratic line.</p> Source code in <code>itfit/utils/quadratic.py</code> <pre><code>class DragQuadraticManager(DragPointCollection):\n\"\"\"Collection of DragPoints representing a quadratic line.\"\"\"\n\n    @staticmethod\n    def function(x, a, b, c):\n\"\"\"Quadratic function.\n\n        Parameters:\n            x (float):\n                independent variable.\n            a (float):\n                x^2 coefficient.\n            b (float):\n                x^1 coefficient.\n            c (float):\n                constant coefficient.\n\n        Returns:\n            (float):\n                `f(x)=a*x^2 + b*x + c`\n        \"\"\"\n        return a*x*x + b*x + c\n\n    def __init__(self, dragpoints: list[DragPoint], blit_manager: BlitManager):\n\"\"\"Quadratic line between 2 DragPoints. Updates with them.\n\n        Args:\n            dragpoints (list[DragPoint]): line vertices.\n            blit_manager (BlitManager): used for automtic ploting.\n        \"\"\"\n        super().__init__(dragpoints, blit_manager)\n        # name points based on use\n        self.center_point = self.dragpoints[0]\n        self.lateral_point = self.dragpoints[1]\n        self.update()\n\n    def update(self, *args, **kargs):\n\"\"\"Updates line data with DragObjects positions\"\"\"\n        cp_x, lp_x = self.get_xdata()\n        a,b,c = self.get_args()\n\n        # create x and y data of quadratic line centered in center_point\n        dx = abs(lp_x-cp_x)*1.5\n        x = np.linspace(cp_x-dx, cp_x+dx, 250)\n        y = self.function(x, a, b, c)\n\n        # from data coordinates to display coordinates\n        xy = np.array((x,y)).T.reshape(-1, 2)\n        x_data, y_data = self.set_xy(xy).T\n\n        # set new data\n        self.poly.set_xdata(x_data)\n        self.poly.set_ydata(y_data)\n\n    def get_args(self):\n\"\"\"Gives quadratic function parameters.\n\n        Returns:\n            (Tuple[float, float, float]):\n                `a`, `b` and `c` of `f(x)=a*x^2 + b*x + c`.\n        \"\"\"\n        cp_x, cp_y = self.get_xy(*self.center_point.patch.get_center())\n        lp_x, lp_y = self.get_xy(*self.lateral_point.patch.get_center())\n        a = (lp_y - cp_y)/np.square(lp_x-cp_x)\n        b = -2*a*cp_x\n        c = cp_y + a*cp_x*cp_x\n        return a,b,c\n</code></pre>"},{"location":"reference/itfit/utils/quadratic/#itfit.utils.quadratic.DragQuadraticManager.__init__","title":"<code>__init__(dragpoints, blit_manager)</code>","text":"<p>Quadratic line between 2 DragPoints. Updates with them.</p> <p>Parameters:</p> Name Type Description Default <code>dragpoints</code> <code>list[DragPoint]</code> <p>line vertices.</p> required <code>blit_manager</code> <code>BlitManager</code> <p>used for automtic ploting.</p> required Source code in <code>itfit/utils/quadratic.py</code> <pre><code>def __init__(self, dragpoints: list[DragPoint], blit_manager: BlitManager):\n\"\"\"Quadratic line between 2 DragPoints. Updates with them.\n\n    Args:\n        dragpoints (list[DragPoint]): line vertices.\n        blit_manager (BlitManager): used for automtic ploting.\n    \"\"\"\n    super().__init__(dragpoints, blit_manager)\n    # name points based on use\n    self.center_point = self.dragpoints[0]\n    self.lateral_point = self.dragpoints[1]\n    self.update()\n</code></pre>"},{"location":"reference/itfit/utils/quadratic/#itfit.utils.quadratic.DragQuadraticManager.function","title":"<code>function(x, a, b, c)</code>  <code>staticmethod</code>","text":"<p>Quadratic function.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>independent variable.</p> required <code>a</code> <code>float</code> <p>x^2 coefficient.</p> required <code>b</code> <code>float</code> <p>x^1 coefficient.</p> required <code>c</code> <code>float</code> <p>constant coefficient.</p> required <p>Returns:</p> Type Description <code>float</code> <p><code>f(x)=a*x^2 + b*x + c</code></p> Source code in <code>itfit/utils/quadratic.py</code> <pre><code>@staticmethod\ndef function(x, a, b, c):\n\"\"\"Quadratic function.\n\n    Parameters:\n        x (float):\n            independent variable.\n        a (float):\n            x^2 coefficient.\n        b (float):\n            x^1 coefficient.\n        c (float):\n            constant coefficient.\n\n    Returns:\n        (float):\n            `f(x)=a*x^2 + b*x + c`\n    \"\"\"\n    return a*x*x + b*x + c\n</code></pre>"},{"location":"reference/itfit/utils/quadratic/#itfit.utils.quadratic.DragQuadraticManager.get_args","title":"<code>get_args()</code>","text":"<p>Gives quadratic function parameters.</p> <p>Returns:</p> Type Description <code>Tuple[float, float, float]</code> <p><code>a</code>, <code>b</code> and <code>c</code> of <code>f(x)=a*x^2 + b*x + c</code>.</p> Source code in <code>itfit/utils/quadratic.py</code> <pre><code>def get_args(self):\n\"\"\"Gives quadratic function parameters.\n\n    Returns:\n        (Tuple[float, float, float]):\n            `a`, `b` and `c` of `f(x)=a*x^2 + b*x + c`.\n    \"\"\"\n    cp_x, cp_y = self.get_xy(*self.center_point.patch.get_center())\n    lp_x, lp_y = self.get_xy(*self.lateral_point.patch.get_center())\n    a = (lp_y - cp_y)/np.square(lp_x-cp_x)\n    b = -2*a*cp_x\n    c = cp_y + a*cp_x*cp_x\n    return a,b,c\n</code></pre>"},{"location":"reference/itfit/utils/quadratic/#itfit.utils.quadratic.DragQuadraticManager.update","title":"<code>update(*args, **kargs)</code>","text":"<p>Updates line data with DragObjects positions</p> Source code in <code>itfit/utils/quadratic.py</code> <pre><code>def update(self, *args, **kargs):\n\"\"\"Updates line data with DragObjects positions\"\"\"\n    cp_x, lp_x = self.get_xdata()\n    a,b,c = self.get_args()\n\n    # create x and y data of quadratic line centered in center_point\n    dx = abs(lp_x-cp_x)*1.5\n    x = np.linspace(cp_x-dx, cp_x+dx, 250)\n    y = self.function(x, a, b, c)\n\n    # from data coordinates to display coordinates\n    xy = np.array((x,y)).T.reshape(-1, 2)\n    x_data, y_data = self.set_xy(xy).T\n\n    # set new data\n    self.poly.set_xdata(x_data)\n    self.poly.set_ydata(y_data)\n</code></pre>"}]}